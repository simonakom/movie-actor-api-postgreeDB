{
	"info": {
		"_postman_id": "08ed52fc-604b-4488-8991-b84c0245d4eb",
		"name": "movie-actor-api-postgreeDB",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32368873"
	},
	"item": [
		{
			"name": "Create actor functionality",
			"item": [
				{
					"name": "Create actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"const requestBody = pm.request.body.raw",
									"const requestJson = JSON.parse(requestBody)",
									"",
									"//-----------------------------Variables---------------------------------//",
									"pm.collectionVariables.set(\"actorId\", response.id) ",
									"pm.collectionVariables.set(\"actorFirstName\", requestJson.firstName)",
									"pm.collectionVariables.set(\"actorLastName\", requestJson.lastName)",
									"pm.collectionVariables.set(\"actorDateOfBirth\", requestJson.dateOfBirth)",
									"",
									"//-----------------------------Tests-------------------------------------//",
									"pm.test(\"Response matches request body inputs\", () =>{",
									"    actorId = pm.collectionVariables.get(\"actorId\")",
									"",
									"    pm.expect(response.id).to.eql(actorId);",
									"    pm.expect(response.first_name).to.eql(requestJson.firstName);",
									"    pm.expect(response.last_name).to.eql(requestJson.lastName);",
									"    pm.expect(response.date_of_birth).to.eql(requestJson.dateOfBirth);",
									"})",
									"pm.test(\"Response body contains all expected fields\", () => {",
									"    pm.expect(response).to.have.property(\"id\");",
									"    pm.expect(response).to.have.property(\"first_name\");",
									"    pm.expect(response).to.have.property(\"last_name\");",
									"    pm.expect(response).to.have.property(\"date_of_birth\");",
									"});",
									"pm.test(\"Response fields have correct data types\", () => {",
									"    pm.expect(response.id).to.be.a(\"number\").and.be.above(0);",
									"    pm.expect(response.first_name).to.be.a(\"string\");",
									"    pm.expect(response.last_name).to.be.a(\"string\");",
									"    pm.expect(response.date_of_birth).to.be.a(\"string\");",
									"});",
									"pm.test(\"ID is present and is a positive integer\", () => {",
									"    pm.expect(response).to.have.property(\"id\");",
									"    pm.expect(response.id).to.be.a(\"number\");",
									"    pm.expect(response.id).to.be.greaterThan(0);",
									"});",
									"pm.test(\"Date of birth is in correct format (YYYY-MM-DD)\", () => {",
									"    const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"    pm.expect(response.date_of_birth).to.match(dobRegex);",
									"});",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Tom\",\n    \"lastName\": \"Hanks\",\n    \"dateOfBirth\": \"1956-07-09\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{actorUrl}}",
							"host": [
								"{{actorUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get actor by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"// pm.test(\"Response matches request body inputs\", () => {",
									"//     actorId = pm.collectionVariables.get(\"actorId\")",
									"//     firstName = pm.collectionVariables.get(\"actorFirstName\")",
									"//     lastName = pm.collectionVariables.get(\"actorLastName\")",
									"//     birthDate = pm.collectionVariables.get(\"actorDateOfBirth\")",
									"",
									"//     pm.expect(response.id).to.be.eql(actorId)",
									"//     pm.expect(response.first_name).to.be.eql(firstName)",
									"//     pm.expect(response.last_name).to.be.eql(lastName)",
									"//     pm.expect(response.date_of_birth).to.be.eql(birthDate)",
									"// })",
									"// pm.test(\"Response body contains all expected fields\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response).to.have.property(\"first_name\");",
									"//     pm.expect(response).to.have.property(\"last_name\");",
									"//     pm.expect(response).to.have.property(\"date_of_birth\");",
									"// });",
									"// pm.test(\"Response fields have correct data types\", () => {",
									"//     pm.expect(response.id).to.be.a(\"number\").and.be.above(0);;",
									"//     pm.expect(response.first_name).to.be.a(\"string\");",
									"//     pm.expect(response.last_name).to.be.a(\"string\");",
									"//     pm.expect(response.date_of_birth).to.be.a(\"string\");",
									"// });",
									"// pm.test(\"Response fields are not empty\", () => {",
									"//     pm.expect(response.first_name).to.not.be.empty;",
									"//     pm.expect(response.last_name).to.not.be.empty;",
									"//     pm.expect(response.date_of_birth).to.not.be.empty;",
									"// });",
									"// pm.test(\"Response does not contain unexpected fields\", () => {",
									"//     pm.expect(response).to.not.have.any.keys(\"extra_field1\", \"extra_field2\");",
									"// });",
									"// pm.test(\"Date of birth is in correct format (YYYY-MM-DD)\", () => {",
									"//     const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"//     pm.expect(response.date_of_birth).to.match(dobRegex);",
									"// });",
									"// pm.test(\"Date of birth is a valid date\", () => {",
									"//     const dob = new Date(response.date_of_birth);",
									"//     pm.expect(dob.getFullYear()).to.eql(parseInt(response.date_of_birth.substring(0, 4), 10));",
									"//     pm.expect(dob.getMonth() + 1).to.eql(parseInt(response.date_of_birth.substring(5, 7), 10));",
									"//     pm.expect(dob.getDate()).to.eql(parseInt(response.date_of_birth.substring(8, 10), 10));",
									"// });",
									"// pm.test(\"ID is a positive integer\", () => {",
									"//     pm.expect(response.id).to.be.a(\"number\");",
									"//     pm.expect(response.id).to.be.greaterThan(0);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is an object\", () => {",
									"//     pm.expect(response).to.be.an(\"object\");",
									"// });",
									"// pm.test(\"Request body is empty\", () => {",
									"//     if (pm.request.body) {",
									"//         pm.expect(pm.request.body.raw).to.be.undefined; ",
									"//     } else {",
									"//         pm.expect(pm.request.body).to.be.undefined; ",
									"//     }",
									"// }); ",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{actorUrl}}/{{actorId}}",
							"host": [
								"{{actorUrl}}"
							],
							"path": [
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create actor without first name (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Request body does not contain 'firstName'\", () => {",
									"    const requestBody = pm.request.body.raw;",
									"    const request = JSON.parse(requestBody); //console.log(request)",
									"    pm.expect(request).to.not.have.property(\"firstName\");",
									"});",
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"First name, last name, and date of birth are required.\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"first_name\", \"last_name\", \"date_of_birth\");",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lastName\": \"Deep\",\n    \"dateOfBirth\": \"1963-06-09\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{actorUrl}}",
							"host": [
								"{{actorUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create actor without last name (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Request body does not contain 'lastName'\", () => {",
									"    const requestBody = pm.request.body.raw;",
									"    const request = JSON.parse(requestBody); //console.log(request)",
									"    pm.expect(request).to.not.have.property(\"lastName\");",
									"});",
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"First name, last name, and date of birth are required.\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"first_name\", \"last_name\", \"date_of_birth\");",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Johhny\",\n    \"dateOfBirth\": \"1963-06-09\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{actorUrl}}",
							"host": [
								"{{actorUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create actor without birth date (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Request body does not contain 'dateOfBirth'\", () => {",
									"    const requestBody = pm.request.body.raw;",
									"    const request = JSON.parse(requestBody); //console.log(request)",
									"    pm.expect(request).to.not.have.property(\"dateOfBirth\");",
									"});",
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"First name, last name, and date of birth are required.\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"first_name\", \"last_name\", \"date_of_birth\");",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Johhny\",\n    \"lastName\": \"Deep\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{actorUrl}}",
							"host": [
								"{{actorUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create actor with future date of birth (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Request body contains a future date for 'dateOfBirth'\", () => {",
									"    const requestBody = pm.request.body.raw;",
									"    const request = JSON.parse(requestBody); //console.log(request)",
									"",
									"    const currentDate = new Date().toISOString().split('T')[0];",
									"    pm.expect(request.dateOfBirth).to.be.a('string');",
									"    pm.expect(new Date(request.dateOfBirth).getTime()).to.be.greaterThan(new Date(currentDate).getTime());});",
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"Date of birth cannot be in the future.\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"first_name\", \"last_name\", \"date_of_birth\");",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Johhny\",\n    \"lastName\": \"Deep\",\n    \"dateOfBirth\": \"2050-01-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{actorUrl}}",
							"host": [
								"{{actorUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"// pm.test(\"Response is an array\", () => {",
									"//     pm.expect(response).to.be.an('array');",
									"// });",
									"// pm.test(\"Last saved actor details are present in the response\", () => {",
									"//     savedId = pm.collectionVariables.get(\"actorId\")",
									"//     savedFirstName = pm.collectionVariables.get(\"actorFirstName\")",
									"//     savedLastName = pm.collectionVariables.get(\"actorLastName\")",
									"//     savedDateOfBirth = pm.collectionVariables.get(\"actorDateOfBirth\")",
									"    ",
									"//     const actorFound = response.some(actor => ",
									"//         actor.id === Number(savedId) &&",
									"//         actor.first_name === savedFirstName &&",
									"//         actor.last_name === savedLastName &&",
									"//         actor.date_of_birth === savedDateOfBirth",
									"//     );",
									"//     pm.expect(actorFound).to.be.true;",
									"// });",
									"// pm.test(\"All items in the response array are objects\", () => {",
									"//     response.forEach(item => {",
									"//         pm.expect(item).to.be.an('object');",
									"//     });",
									"// });",
									"// pm.test(\"Each object in array contains required fields\", () => {",
									"//     response.forEach(actor => {",
									"//         pm.expect(actor).to.have.property('id').and.be.above(0);;",
									"//         pm.expect(actor).to.have.property('first_name');",
									"//         pm.expect(actor).to.have.property('last_name');",
									"//         pm.expect(actor).to.have.property('date_of_birth');",
									"//     });",
									"// });",
									"// pm.test(\"Each actor has the correct structure\", () => {",
									"//     response.forEach(actor => {",
									"//         pm.expect(actor).to.have.all.keys('id', 'first_name', 'last_name', 'date_of_birth');",
									"//     });",
									"// });",
									"// pm.test(\"Response does not contain unexpected fields\", () => {",
									"//     const validFields = ['id', 'first_name', 'last_name', 'date_of_birth'];",
									"//     response.forEach(actor => {",
									"//         Object.keys(actor).forEach(key => {",
									"//             pm.expect(validFields).to.include(key, `Unexpected field: ${key}`);",
									"//         });",
									"//     });",
									"// });",
									"// pm.test(\"Date of birth format is YYYY-MM-DD for all actors\", () => {",
									"//     const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"//     response.forEach(actor => {",
									"//         pm.expect(actor.date_of_birth).to.match(dateRegex);",
									"//     });",
									"// });",
									"// pm.test(\"Date of birth is not in the future\", () => {",
									"//     const today = new Date();",
									"//     response.forEach(actor => {",
									"//         const dob = new Date(actor.date_of_birth);",
									"//         pm.expect(dob).to.be.below(today);",
									"//     });",
									"// });",
									"// pm.test(\"Each actor has a unique ID\", () => {",
									"//     const ids = response.map(actor => actor.id);",
									"//     const uniqueIds = new Set(ids);",
									"//     pm.expect(uniqueIds.size).to.eql(ids.length);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is not empty\", () => {",
									"//     pm.expect(response).to.not.be.empty;",
									"// });",
									"// pm.test(\"Request body is empty\", () => {",
									"//     if (pm.request.body) {",
									"//         pm.expect(pm.request.body.raw).to.be.undefined; ",
									"//     } else {",
									"//         pm.expect(pm.request.body).to.be.undefined; ",
									"//     }",
									"// }); ",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{actorUrl}}",
							"host": [
								"{{actorUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Retrieve actor functionality",
			"item": [
				{
					"name": "Create actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() //console.log (response)",
									"const requestBody = pm.request.body.raw",
									"const requestJson = JSON.parse(requestBody)",
									"",
									"//-----------------------------Variables---------------------------------//",
									"pm.collectionVariables.set(\"actorId\", response.id)",
									"pm.collectionVariables.set(\"actorFirstName\", requestJson.firstName)",
									"pm.collectionVariables.set(\"actorLastName\", requestJson.lastName)",
									"pm.collectionVariables.set(\"actorDateOfBirth\", requestJson.dateOfBirth)",
									"pm.collectionVariables.set(\"actorUrl\", \"http://localhost:3000/actors\");",
									"pm.collectionVariables.set(\"nonExistentId\", \"99999999\");",
									"",
									"//-----------------------------Tests-------------------------------------//",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"// pm.test(\"Response matches request body inputs\", () =>{",
									"//     actorId = pm.collectionVariables.get(\"actorId\")",
									"",
									"//     pm.expect(response.id).to.eql(actorId);",
									"//     pm.expect(response.first_name).to.eql(requestJson.firstName);",
									"//     pm.expect(response.last_name).to.eql(requestJson.lastName);",
									"//     pm.expect(response.date_of_birth).to.eql(requestJson.dateOfBirth);",
									"// })",
									"// pm.test(\"Response body contains all expected fields\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response).to.have.property(\"first_name\");",
									"//     pm.expect(response).to.have.property(\"last_name\");",
									"//     pm.expect(response).to.have.property(\"date_of_birth\");",
									"// });",
									"// pm.test(\"Response fields have correct data types\", () => {",
									"//     pm.expect(response.id).to.be.a(\"number\").and.be.above(0);",
									"//     pm.expect(response.first_name).to.be.a(\"string\");",
									"//     pm.expect(response.last_name).to.be.a(\"string\");",
									"//     pm.expect(response.date_of_birth).to.be.a(\"string\");",
									"// });",
									"// pm.test(\"ID is present and is a positive integer\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response.id).to.be.a(\"number\");",
									"//     pm.expect(response.id).to.be.greaterThan(0);",
									"// });",
									"// pm.test(\"Date of birth is in correct format (YYYY-MM-DD)\", () => {",
									"//     const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"//     pm.expect(response.date_of_birth).to.match(dobRegex);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is an object\", () => {",
									"//     pm.expect(response).to.be.an(\"object\");",
									"// });",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Timothée\",\n    \"lastName\": \"Chalamet\",\n    \"dateOfBirth\": \"1995-12-27\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{actorUrl}}",
							"host": [
								"{{actorUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get actor by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Response matches request body inputs\", () => {",
									"    actorId = pm.collectionVariables.get(\"actorId\")",
									"    firstName = pm.collectionVariables.get(\"actorFirstName\")",
									"    lastName = pm.collectionVariables.get(\"actorLastName\")",
									"    birthDate = pm.collectionVariables.get(\"actorDateOfBirth\")",
									"",
									"    pm.expect(response.id).to.be.eql(actorId)",
									"    pm.expect(response.first_name).to.be.eql(firstName)",
									"    pm.expect(response.last_name).to.be.eql(lastName)",
									"    pm.expect(response.date_of_birth).to.be.eql(birthDate)",
									"})",
									"pm.test(\"Response body contains all expected fields\", () => {",
									"    pm.expect(response).to.have.property(\"id\");",
									"    pm.expect(response).to.have.property(\"first_name\");",
									"    pm.expect(response).to.have.property(\"last_name\");",
									"    pm.expect(response).to.have.property(\"date_of_birth\");",
									"});",
									"pm.test(\"Response fields have correct data types\", () => {",
									"    pm.expect(response.id).to.be.a(\"number\").and.be.above(0);;",
									"    pm.expect(response.first_name).to.be.a(\"string\");",
									"    pm.expect(response.last_name).to.be.a(\"string\");",
									"    pm.expect(response.date_of_birth).to.be.a(\"string\");",
									"});",
									"pm.test(\"Fields are not empty\", () => {",
									"    pm.expect(response.first_name).to.not.be.empty;",
									"    pm.expect(response.last_name).to.not.be.empty;",
									"    pm.expect(response.date_of_birth).to.not.be.empty;",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"extra_field1\", \"extra_field2\");",
									"});",
									"pm.test(\"Date of birth is in correct format (YYYY-MM-DD)\", () => {",
									"    const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"    pm.expect(response.date_of_birth).to.match(dobRegex);",
									"});",
									"pm.test(\"Date of birth is a valid date\", () => {",
									"    const dob = new Date(response.date_of_birth);",
									"    pm.expect(dob.getFullYear()).to.eql(parseInt(response.date_of_birth.substring(0, 4), 10));",
									"    pm.expect(dob.getMonth() + 1).to.eql(parseInt(response.date_of_birth.substring(5, 7), 10));",
									"    pm.expect(dob.getDate()).to.eql(parseInt(response.date_of_birth.substring(8, 10), 10));",
									"});",
									"pm.test(\"ID is a positive integer\", () => {",
									"    pm.expect(response.id).to.be.a(\"number\");",
									"    pm.expect(response.id).to.be.greaterThan(0);",
									"});",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									"pm.test(\"Request body is empty\", () => {",
									"    if (pm.request.body) {",
									"        pm.expect(pm.request.body.raw).to.be.undefined; ",
									"    } else {",
									"        pm.expect(pm.request.body).to.be.undefined; ",
									"    }",
									"}); ",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{actorUrl}}/{{actorId}}",
							"host": [
								"{{actorUrl}}"
							],
							"path": [
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get actor by non-existent ID (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Request URL contains the correct non-existent ID\", () => {",
									"    const actorUrl = pm.variables.get(\"actorUrl\");",
									"    const nonExistentId = pm.variables.get(\"nonExistentId\");",
									"    const requestUrl = pm.request.url.toString();",
									"    pm.expect(requestUrl).to.include(`${actorUrl}/${nonExistentId}`);",
									"});",
									"pm.test(\"Status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"Actor not found\");",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"first_name\", \"last_name\", \"date_of_birth\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									"pm.test(\"Request body is empty\", () => {",
									"    if (pm.request.body) {",
									"        pm.expect(pm.request.body.raw).to.be.undefined; ",
									"    } else {",
									"        pm.expect(pm.request.body).to.be.undefined; ",
									"    }",
									"}); ",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{actorUrl}}/{{nonExistentId}}",
							"host": [
								"{{actorUrl}}"
							],
							"path": [
								"{{nonExistentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Response is an array\", () => {",
									"    pm.expect(response).to.be.an('array');",
									"});",
									"pm.test(\"Saved last actor details are present in the response\", () => {",
									"    savedId = pm.collectionVariables.get(\"actorId\")",
									"    savedFirstName = pm.collectionVariables.get(\"actorFirstName\")",
									"    savedLastName = pm.collectionVariables.get(\"actorLastName\")",
									"    savedDateOfBirth = pm.collectionVariables.get(\"actorDateOfBirth\")",
									"    ",
									"    const actorFound = response.some(actor => ",
									"        actor.id === Number(savedId) &&",
									"        actor.first_name === savedFirstName &&",
									"        actor.last_name === savedLastName &&",
									"        actor.date_of_birth === savedDateOfBirth",
									"    );",
									"    pm.expect(actorFound).to.be.true;",
									"});",
									"pm.test(\"All items in the response array are objects\", () => {",
									"    response.forEach(item => {",
									"        pm.expect(item).to.be.an('object');",
									"    });",
									"});",
									"pm.test(\"Each actor object in array contains required fields\", () => {",
									"    response.forEach(actor => {",
									"        pm.expect(actor).to.have.property('id').and.be.above(0);;",
									"        pm.expect(actor).to.have.property('first_name');",
									"        pm.expect(actor).to.have.property('last_name');",
									"        pm.expect(actor).to.have.property('date_of_birth');",
									"    });",
									"});",
									"pm.test(\"Response has the correct structure\", () => {",
									"    response.forEach(actor => {",
									"        pm.expect(actor).to.have.all.keys('id', 'first_name', 'last_name', 'date_of_birth');",
									"    });",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    const validFields = ['id', 'first_name', 'last_name', 'date_of_birth'];",
									"    response.forEach(actor => {",
									"        Object.keys(actor).forEach(key => {",
									"            pm.expect(validFields).to.include(key, `Unexpected field: ${key}`);",
									"        });",
									"    });",
									"});",
									"pm.test(\"Date of birth format is YYYY-MM-DD for all actors\", () => {",
									"    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"    response.forEach(actor => {",
									"        pm.expect(actor.date_of_birth).to.match(dateRegex);",
									"    });",
									"});",
									"pm.test(\"Date of birth is not in the future\", () => {",
									"    const today = new Date();",
									"    response.forEach(actor => {",
									"        const dob = new Date(actor.date_of_birth);",
									"        pm.expect(dob).to.be.below(today);",
									"    });",
									"});",
									"pm.test(\"Each actor has a unique ID\", () => {",
									"    const ids = response.map(actor => actor.id);",
									"    const uniqueIds = new Set(ids);",
									"    pm.expect(uniqueIds.size).to.eql(ids.length);",
									"});",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response is not empty\", () => {",
									"    pm.expect(response).to.not.be.empty;",
									"});",
									"pm.test(\"Request body is empty\", () => {",
									"    if (pm.request.body) {",
									"        pm.expect(pm.request.body.raw).to.be.undefined; ",
									"    } else {",
									"        pm.expect(pm.request.body).to.be.undefined; ",
									"    }",
									"}); ",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{actorUrl}}",
							"host": [
								"{{actorUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update actor functionality",
			"item": [
				{
					"name": "Create actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() //console.log (response)",
									"const requestBody = pm.request.body.raw",
									"const requestJson = JSON.parse(requestBody)",
									"",
									"//-----------------------------Variables---------------------------------//",
									"pm.collectionVariables.set(\"actorId\", response.id) ",
									"pm.collectionVariables.set(\"actorFirstName\", requestJson.firstName)",
									"pm.collectionVariables.set(\"actorLastName\", requestJson .lastName)",
									"pm.collectionVariables.set(\"actorDateOfBirth\", requestJson .dateOfBirth)",
									"pm.collectionVariables.set(\"actorUrl\", \"http://localhost:3000/actors\");",
									"pm.collectionVariables.set(\"nonExistentId\", \"99999999\");",
									"",
									"//-----------------------------Tests-------------------------------------//",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"// pm.test(\"Response matches request body inputs\", () =>{",
									"//     actorId = pm.collectionVariables.get(\"actorId\")",
									"",
									"//     pm.expect(response.id).to.eql(actorId);",
									"//     pm.expect(response.first_name).to.eql(requestJson.firstName);",
									"//     pm.expect(response.last_name).to.eql(requestJson.lastName);",
									"//     pm.expect(response.date_of_birth).to.eql(requestJson.dateOfBirth);",
									"// })",
									"// pm.test(\"Response body contains all expected fields\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response).to.have.property(\"first_name\");",
									"//     pm.expect(response).to.have.property(\"last_name\");",
									"//     pm.expect(response).to.have.property(\"date_of_birth\");",
									"// });",
									"// pm.test(\"Response fields have correct data types\", () => {",
									"//     pm.expect(response.id).to.be.a(\"number\").and.be.above(0);",
									"//     pm.expect(response.first_name).to.be.a(\"string\");",
									"//     pm.expect(response.last_name).to.be.a(\"string\");",
									"//     pm.expect(response.date_of_birth).to.be.a(\"string\");",
									"// });",
									"// pm.test(\"ID is present and is a positive integer\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response.id).to.be.a(\"number\");",
									"//     pm.expect(response.id).to.be.greaterThan(0);",
									"// });",
									"// pm.test(\"Date of birth is in correct format (YYYY-MM-DD)\", () => {",
									"//     const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"//     pm.expect(response.date_of_birth).to.match(dobRegex);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is an object\", () => {",
									"//     pm.expect(response).to.be.an(\"object\");",
									"// });",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Zendaya\",\n    \"lastName\": \"Maree\",\n    \"dateOfBirth\": \"1996-09-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{actorUrl}}",
							"host": [
								"{{actorUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get actor by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"// pm.test(\"Response matches request body inputs\", () => {",
									"//     actorId = pm.collectionVariables.get(\"actorId\")",
									"//     firstName = pm.collectionVariables.get(\"actorFirstName\")",
									"//     lastName = pm.collectionVariables.get(\"actorLastName\")",
									"//     birthDate = pm.collectionVariables.get(\"actorDateOfBirth\")",
									"",
									"//     pm.expect(response.id).to.be.eql(actorId)",
									"//     pm.expect(response.first_name).to.be.eql(firstName)",
									"//     pm.expect(response.last_name).to.be.eql(lastName)",
									"//     pm.expect(response.date_of_birth).to.be.eql(birthDate)",
									"// })",
									"// pm.test(\"Response body contains all expected fields\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response).to.have.property(\"first_name\");",
									"//     pm.expect(response).to.have.property(\"last_name\");",
									"//     pm.expect(response).to.have.property(\"date_of_birth\");",
									"// });",
									"// pm.test(\"Response fields have correct data types\", () => {",
									"//     pm.expect(response.id).to.be.a(\"number\").and.be.above(0);;",
									"//     pm.expect(response.first_name).to.be.a(\"string\");",
									"//     pm.expect(response.last_name).to.be.a(\"string\");",
									"//     pm.expect(response.date_of_birth).to.be.a(\"string\");",
									"// });",
									"// pm.test(\"Fields are not empty\", () => {",
									"//     pm.expect(response.first_name).to.not.be.empty;",
									"//     pm.expect(response.last_name).to.not.be.empty;",
									"//     pm.expect(response.date_of_birth).to.not.be.empty;",
									"// });",
									"// pm.test(\"Response does not contain unexpected fields\", () => {",
									"//     pm.expect(response).to.not.have.any.keys(\"extra_field1\", \"extra_field2\");",
									"// });",
									"// pm.test(\"Date of birth is in correct format (YYYY-MM-DD)\", () => {",
									"//     const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"//     pm.expect(response.date_of_birth).to.match(dobRegex);",
									"// });",
									"// pm.test(\"Date of birth is a valid date\", () => {",
									"//     const dob = new Date(response.date_of_birth);",
									"//     pm.expect(dob.getFullYear()).to.eql(parseInt(response.date_of_birth.substring(0, 4), 10));",
									"//     pm.expect(dob.getMonth() + 1).to.eql(parseInt(response.date_of_birth.substring(5, 7), 10));",
									"//     pm.expect(dob.getDate()).to.eql(parseInt(response.date_of_birth.substring(8, 10), 10));",
									"// });",
									"// pm.test(\"ID is a positive integer\", () => {",
									"//     pm.expect(response.id).to.be.a(\"number\");",
									"//     pm.expect(response.id).to.be.greaterThan(0);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is an object\", () => {",
									"//     pm.expect(response).to.be.an(\"object\");",
									"// });",
									"// pm.test(\"Request body is empty\", () => {",
									"//     if (pm.request.body) {",
									"//         pm.expect(pm.request.body.raw).to.be.undefined; ",
									"//     } else {",
									"//         pm.expect(pm.request.body).to.be.undefined; ",
									"//     }",
									"// }); ",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{actorUrl}}/{{actorId}}",
							"host": [
								"{{actorUrl}}"
							],
							"path": [
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() //console.log (response)",
									"const requestBody = pm.request.body.raw",
									"const requestJson = JSON.parse(requestBody)",
									"",
									"//-----------------------------Variables---------------------------------//",
									"pm.collectionVariables.set(\"actorFirstName\", requestJson.firstName)",
									"pm.collectionVariables.set(\"actorLastName\", requestJson .lastName)",
									"pm.collectionVariables.set(\"actorDateOfBirth\", requestJson .dateOfBirth)",
									"",
									"//-----------------------------Tests-------------------------------------//",
									"pm.test(\"Response matches request body inputs\", () =>{",
									"    actorId = pm.collectionVariables.get(\"actorId\")",
									"",
									"    pm.expect(response.id).to.eql(actorId);",
									"    pm.expect(response.first_name).to.eql(requestJson.firstName);",
									"    pm.expect(response.last_name).to.eql(requestJson.lastName);",
									"    pm.expect(response.date_of_birth).to.eql(requestJson.dateOfBirth);",
									"})",
									"pm.test(\"Response body contains all expected fields\", () => {",
									"    pm.expect(response).to.have.property(\"id\");",
									"    pm.expect(response).to.have.property(\"first_name\");",
									"    pm.expect(response).to.have.property(\"last_name\");",
									"    pm.expect(response).to.have.property(\"date_of_birth\");",
									"});",
									"pm.test(\"Response fields have correct data types\", () => {",
									"    pm.expect(response.id).to.be.a(\"number\").and.be.above(0);",
									"    pm.expect(response.first_name).to.be.a(\"string\");",
									"    pm.expect(response.last_name).to.be.a(\"string\");",
									"    pm.expect(response.date_of_birth).to.be.a(\"string\");",
									"});",
									"pm.test(\"ID is present and is a positive integer\", () => {",
									"    pm.expect(response).to.have.property(\"id\");",
									"    pm.expect(response.id).to.be.a(\"number\");",
									"    pm.expect(response.id).to.be.greaterThan(0);",
									"});",
									"pm.test(\"Date of birth is in correct format (YYYY-MM-DD)\", () => {",
									"    const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"    pm.expect(response.date_of_birth).to.match(dobRegex);",
									"});",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Zendaya\",\n    \"lastName\": \"Maree Stoermer Coleman\",\n    \"dateOfBirth\": \"1996-09-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{actorUrl}}/{{actorId}}",
							"host": [
								"{{actorUrl}}"
							],
							"path": [
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get updated actor by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Response matches the updated inputs\", () => {",
									"    actorId = pm.collectionVariables.get(\"actorId\")",
									"    firstName = pm.collectionVariables.get(\"actorFirstName\")",
									"    lastName = pm.collectionVariables.get(\"actorLastName\")",
									"    birthDate = pm.collectionVariables.get(\"actorDateOfBirth\")",
									"",
									"    pm.expect(response.id).to.be.eql(actorId)",
									"    pm.expect(response.first_name).to.be.eql(firstName)",
									"    pm.expect(response.last_name).to.be.eql(lastName)",
									"    pm.expect(response.date_of_birth).to.be.eql(birthDate)",
									"})",
									"pm.test(\"Response body contains all expected fields\", () => {",
									"    pm.expect(response).to.have.property(\"id\");",
									"    pm.expect(response).to.have.property(\"first_name\");",
									"    pm.expect(response).to.have.property(\"last_name\");",
									"    pm.expect(response).to.have.property(\"date_of_birth\");",
									"});",
									"pm.test(\"Response fields have correct data types\", () => {",
									"    pm.expect(response.id).to.be.a(\"number\").and.be.above(0);;",
									"    pm.expect(response.first_name).to.be.a(\"string\");",
									"    pm.expect(response.last_name).to.be.a(\"string\");",
									"    pm.expect(response.date_of_birth).to.be.a(\"string\");",
									"});",
									"pm.test(\"Fields are not empty\", () => {",
									"    pm.expect(response.first_name).to.not.be.empty;",
									"    pm.expect(response.last_name).to.not.be.empty;",
									"    pm.expect(response.date_of_birth).to.not.be.empty;",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"extra_field1\", \"extra_field2\");",
									"});",
									"pm.test(\"Date of birth is in correct format (YYYY-MM-DD)\", () => {",
									"    const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"    pm.expect(response.date_of_birth).to.match(dobRegex);",
									"});",
									"pm.test(\"Date of birth is a valid date\", () => {",
									"    const dob = new Date(response.date_of_birth);",
									"    pm.expect(dob.getFullYear()).to.eql(parseInt(response.date_of_birth.substring(0, 4), 10));",
									"    pm.expect(dob.getMonth() + 1).to.eql(parseInt(response.date_of_birth.substring(5, 7), 10));",
									"    pm.expect(dob.getDate()).to.eql(parseInt(response.date_of_birth.substring(8, 10), 10));",
									"});",
									"pm.test(\"ID is a positive integer\", () => {",
									"    pm.expect(response.id).to.be.a(\"number\");",
									"    pm.expect(response.id).to.be.greaterThan(0);",
									"});",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									"pm.test(\"Request body is empty\", () => {",
									"    if (pm.request.body) {",
									"        pm.expect(pm.request.body.raw).to.be.undefined; ",
									"    } else {",
									"        pm.expect(pm.request.body).to.be.undefined; ",
									"    }",
									"}); ",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{actorUrl}}/{{actorId}}",
							"host": [
								"{{actorUrl}}"
							],
							"path": [
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update actor without first name (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Request body does not contain 'firstName'\", () => {",
									"    const requestBody = pm.request.body.raw;",
									"    const request = JSON.parse(requestBody); //console.log(request)",
									"    pm.expect(request).to.not.have.property(\"firstName\");",
									"});",
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"First name cannot be empty.\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"first_name\", \"last_name\", \"date_of_birth\");",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lastName\": \"Coleman\",\n    \"dateOfBirth\": \"1996-09-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{actorUrl}}/{{actorId}}",
							"host": [
								"{{actorUrl}}"
							],
							"path": [
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update actor without last name (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Request body does not contain 'lastName'\", () => {",
									"    const requestBody = pm.request.body.raw;",
									"    const request = JSON.parse(requestBody); //console.log(request)",
									"    pm.expect(request).to.not.have.property(\"lastName\");",
									"});",
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"Last name cannot be empty.\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"first_name\", \"last_name\", \"date_of_birth\");",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Zendaya\",\n    \"dateOfBirth\": \"1996-09-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{actorUrl}}/{{actorId}}",
							"host": [
								"{{actorUrl}}"
							],
							"path": [
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update actor without birth date (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Request body does not contain 'dateOfBirth'\", () => {",
									"    const requestBody = pm.request.body.raw;",
									"    const request = JSON.parse(requestBody); //console.log(request)",
									"    pm.expect(request).to.not.have.property(\"dateOfBirth\");",
									"});",
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"Date of birth cannot be empty.\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"first_name\", \"last_name\", \"date_of_birth\");",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Zendaya\",\n    \"lastName\": \"Coleman\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{actorUrl}}/{{actorId}}",
							"host": [
								"{{actorUrl}}"
							],
							"path": [
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update actor with future date of birth (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Request body contains a future date for 'dateOfBirth'\", () => {",
									"    const requestBody = pm.request.body.raw;",
									"    const request = JSON.parse(requestBody); //console.log(request)",
									"",
									"    const currentDate = new Date().toISOString().split('T')[0];",
									"    pm.expect(request.dateOfBirth).to.be.a('string');",
									"    pm.expect(new Date(request.dateOfBirth).getTime()).to.be.greaterThan(new Date(currentDate).getTime());});",
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"Date of birth cannot be in the future.\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"first_name\", \"last_name\", \"date_of_birth\");",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Zendaya\",\n    \"lastName\": \"Coleman\",\n    \"dateOfBirth\": \"3900-09-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{actorUrl}}/{{actorId}}",
							"host": [
								"{{actorUrl}}"
							],
							"path": [
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update non-existent actor (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Request URL contains the correct non-existent ID\", () => {",
									"    const actorUrl = pm.variables.get(\"actorUrl\");",
									"    const nonExistentId = pm.variables.get(\"nonExistentId\");",
									"    console.log(nonExistentId)",
									"    const requestUrl = pm.request.url.toString();",
									"    pm.expect(requestUrl).to.include(`${actorUrl}/${nonExistentId}`);",
									"});",
									"pm.test(\"Status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"Actor not found\");",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"first_name\", \"last_name\", \"date_of_birth\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Zendaya\",\n    \"lastName\": \"Coleman\",\n    \"dateOfBirth\": \"1996-09-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{actorUrl}}/{{nonExistentId}}",
							"host": [
								"{{actorUrl}}"
							],
							"path": [
								"{{nonExistentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"// pm.test(\"Response is an array\", () => {",
									"//     pm.expect(response).to.be.an('array');",
									"// });",
									"// pm.test(\"Saved actor details are present in the response\", () => {",
									"//     savedId = pm.collectionVariables.get(\"actorId\")",
									"//     savedFirstName = pm.collectionVariables.get(\"actorFirstName\")",
									"//     savedLastName = pm.collectionVariables.get(\"actorLastName\")",
									"//     savedDateOfBirth = pm.collectionVariables.get(\"actorDateOfBirth\")",
									"    ",
									"//     const actorFound = response.some(actor => ",
									"//         actor.id === Number(savedId) &&",
									"//         actor.first_name === savedFirstName &&",
									"//         actor.last_name === savedLastName &&",
									"//         actor.date_of_birth === savedDateOfBirth",
									"//     );",
									"//     pm.expect(actorFound).to.be.true;",
									"// });",
									"// pm.test(\"All items in the response array are objects\", () => {",
									"//     response.forEach(item => {",
									"//         pm.expect(item).to.be.an('object');",
									"//     });",
									"// });",
									"// pm.test(\"Each actor object contains required fields\", () => {",
									"//     response.forEach(actor => {",
									"//         pm.expect(actor).to.have.property('id').and.be.above(0);;",
									"//         pm.expect(actor).to.have.property('first_name');",
									"//         pm.expect(actor).to.have.property('last_name');",
									"//         pm.expect(actor).to.have.property('date_of_birth');",
									"//     });",
									"// });",
									"// pm.test(\"Each actor has the correct structure\", () => {",
									"//     response.forEach(actor => {",
									"//         pm.expect(actor).to.have.all.keys('id', 'first_name', 'last_name', 'date_of_birth');",
									"//     });",
									"// });",
									"// pm.test(\"Response does not contain unexpected fields\", () => {",
									"//     const validFields = ['id', 'first_name', 'last_name', 'date_of_birth'];",
									"//     response.forEach(actor => {",
									"//         Object.keys(actor).forEach(key => {",
									"//             pm.expect(validFields).to.include(key, `Unexpected field: ${key}`);",
									"//         });",
									"//     });",
									"// });",
									"// pm.test(\"Date of birth format is YYYY-MM-DD for all actors\", () => {",
									"//     const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"//     response.forEach(actor => {",
									"//         pm.expect(actor.date_of_birth).to.match(dateRegex);",
									"//     });",
									"// });",
									"// pm.test(\"Date of birth is not in the future\", () => {",
									"//     const today = new Date();",
									"//     response.forEach(actor => {",
									"//         const dob = new Date(actor.date_of_birth);",
									"//         pm.expect(dob).to.be.below(today);",
									"//     });",
									"// });",
									"// pm.test(\"Each actor has a unique ID\", () => {",
									"//     const ids = response.map(actor => actor.id);",
									"//     const uniqueIds = new Set(ids);",
									"//     pm.expect(uniqueIds.size).to.eql(ids.length);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is not empty\", () => {",
									"//     pm.expect(response).to.not.be.empty;",
									"// });",
									"// pm.test(\"Request body is empty\", () => {",
									"//     if (pm.request.body) {",
									"//         pm.expect(pm.request.body.raw).to.be.undefined; ",
									"//     } else {",
									"//         pm.expect(pm.request.body).to.be.undefined; ",
									"//     }",
									"// }); ",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{actorUrl}}",
							"host": [
								"{{actorUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete actor functionality",
			"item": [
				{
					"name": "Create actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() //console.log (response)",
									"const requestBody = pm.request.body.raw",
									"const requestJson = JSON.parse(requestBody)",
									"",
									"//-----------------------------Variables---------------------------------//",
									"pm.collectionVariables.set(\"actorId\", response.id) ",
									"pm.collectionVariables.set(\"actorFirstName\", requestJson.firstName)",
									"pm.collectionVariables.set(\"actorLastName\", requestJson .lastName)",
									"pm.collectionVariables.set(\"actorDateOfBirth\", requestJson .dateOfBirth)",
									"pm.collectionVariables.set(\"actorUrl\", \"http://localhost:3000/actors\");",
									"",
									"//-----------------------------Tests-------------------------------------//",
									"",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"// pm.test(\"Response matches request body inputs\", () =>{",
									"//     actorId = pm.collectionVariables.get(\"actorId\")",
									"",
									"//     pm.expect(response.id).to.eql(actorId);",
									"//     pm.expect(response.first_name).to.eql(requestJson.firstName);",
									"//     pm.expect(response.last_name).to.eql(requestJson.lastName);",
									"//     pm.expect(response.date_of_birth).to.eql(requestJson.dateOfBirth);",
									"// })",
									"// pm.test(\"Response body contains all expected fields\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response).to.have.property(\"first_name\");",
									"//     pm.expect(response).to.have.property(\"last_name\");",
									"//     pm.expect(response).to.have.property(\"date_of_birth\");",
									"// });",
									"// pm.test(\"Response fields have correct data types\", () => {",
									"//     pm.expect(response.id).to.be.a(\"number\").and.be.above(0);",
									"//     pm.expect(response.first_name).to.be.a(\"string\");",
									"//     pm.expect(response.last_name).to.be.a(\"string\");",
									"//     pm.expect(response.date_of_birth).to.be.a(\"string\");",
									"// });",
									"// pm.test(\"ID is present and is a positive integer\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response.id).to.be.a(\"number\");",
									"//     pm.expect(response.id).to.be.greaterThan(0);",
									"// });",
									"// pm.test(\"Date of birth is in correct format (YYYY-MM-DD)\", () => {",
									"//     const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"//     pm.expect(response.date_of_birth).to.match(dobRegex);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is an object\", () => {",
									"//     pm.expect(response).to.be.an(\"object\");",
									"// });",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Margot\",\n    \"lastName\": \"Robbie\",\n    \"dateOfBirth\": \"1990-07-02\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{actorUrl}}",
							"host": [
								"{{actorUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.text() ",
									"",
									"pm.test(\"URL contains the correct actor ID\", () => {",
									"    const actorUrl = pm.variables.get(\"actorUrl\");        ",
									"    const actorId = pm.variables.get(\"actorId\");",
									"",
									"    const requestUrl = pm.request.url.toString();",
									"    pm.expect(requestUrl).to.include(`${actorUrl}/${actorId}`); ",
									"});",
									"pm.test(\"Request body is empty\", () => {",
									"    if (pm.request.body) {",
									"        pm.expect(pm.request.body.raw).to.be.undefined; ",
									"    } else {",
									"        pm.expect(pm.request.body).to.be.undefined; ",
									"    }",
									"}); ",
									"pm.test(\"Response body is empty\", () => {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									"pm.test(\"Status code is 204 Bad Request\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"first_name\", \"last_name\", \"date_of_birth\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{actorUrl}}/{{actorId}}",
							"host": [
								"{{actorUrl}}"
							],
							"path": [
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get actor by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"// pm.test(\"Response does not contain unexpected fields\", () => {",
									"//     pm.expect(response).to.not.have.any.keys(\"id\", \"first_name\", \"last_name\", \"date_of_birth\");",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is an object\", () => {",
									"//     pm.expect(response).to.be.an(\"object\");",
									"// });",
									"// pm.test(\"Response body is valid JSON\", () => {",
									"//     pm.response.to.be.json;",
									"// });",
									"// pm.test(\"Request body is empty\", () => {",
									"//     if (pm.request.body) {",
									"//         pm.expect(pm.request.body.raw).to.be.undefined; ",
									"//     } else {",
									"//         pm.expect(pm.request.body).to.be.undefined; ",
									"//     }",
									"// }); ",
									"// pm.test(\"Response contains the correct error message\", () => {",
									"//     pm.expect(response.message).to.eql(\"Actor not found\");",
									"// });",
									"// pm.test(\"Error message structure is correct\", () => {",
									"//     pm.expect(response).to.have.property(\"message\");",
									"//     pm.expect(response.message).to.be.a(\"string\");",
									"// });",
									"// pm.test(\"Error message is not empty\", () => {",
									"//     pm.expect(response.message).to.not.be.empty;",
									"// });",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{actorUrl}}/{{actorId}}",
							"host": [
								"{{actorUrl}}"
							],
							"path": [
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() //console.log (response)",
									"const requestBody = pm.request.body.raw",
									"const requestJson = JSON.parse(requestBody)",
									"",
									"//-----------------------------Variables---------------------------------//",
									"pm.collectionVariables.set(\"actorId\", response.id) ",
									"pm.collectionVariables.set(\"actorFirstName\", requestJson.firstName)",
									"pm.collectionVariables.set(\"actorLastName\", requestJson .lastName)",
									"pm.collectionVariables.set(\"actorDateOfBirth\", requestJson .dateOfBirth)",
									"",
									"//-----------------------------Tests-------------------------------------//",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"// pm.test(\"Response matches request body inputs\", () =>{",
									"//     actorId = pm.collectionVariables.get(\"actorId\")",
									"",
									"//     pm.expect(response.id).to.eql(actorId);",
									"//     pm.expect(response.first_name).to.eql(requestJson.firstName);",
									"//     pm.expect(response.last_name).to.eql(requestJson.lastName);",
									"//     pm.expect(response.date_of_birth).to.eql(requestJson.dateOfBirth);",
									"// })",
									"// pm.test(\"Response body contains all expected fields\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response).to.have.property(\"first_name\");",
									"//     pm.expect(response).to.have.property(\"last_name\");",
									"//     pm.expect(response).to.have.property(\"date_of_birth\");",
									"// });",
									"// pm.test(\"Response fields have correct data types\", () => {",
									"//     pm.expect(response.id).to.be.a(\"number\").and.be.above(0);",
									"//     pm.expect(response.first_name).to.be.a(\"string\");",
									"//     pm.expect(response.last_name).to.be.a(\"string\");",
									"//     pm.expect(response.date_of_birth).to.be.a(\"string\");",
									"// });",
									"// pm.test(\"ID is present and is a positive integer\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response.id).to.be.a(\"number\");",
									"//     pm.expect(response.id).to.be.greaterThan(0);",
									"// });",
									"// pm.test(\"Date of birth is in correct format (YYYY-MM-DD)\", () => {",
									"//     const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"//     pm.expect(response.date_of_birth).to.match(dobRegex);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is an object\", () => {",
									"//     pm.expect(response).to.be.an(\"object\");",
									"// });",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Rami\",\n    \"lastName\": \"Malek\",\n    \"dateOfBirth\": \"1981-05-12\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{actorUrl}}",
							"host": [
								"{{actorUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() //console.log (response)",
									"const requestBody = pm.request.body.raw",
									"const requestJson = JSON.parse(requestBody)",
									"",
									"//-----------------------------Variables---------------------------------//",
									"pm.collectionVariables.set(\"movieId\", response.id) ",
									"",
									"//-----------------------------Tests-------------------------------------//",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"// pm.test(\"Response matches request body inputs\", () =>{",
									"//     movieId = pm.collectionVariables.get(\"movieId\")",
									"",
									"//     pm.expect(response.id).to.eql(movieId);",
									"//     pm.expect(response.title).to.eql(requestJson.title);",
									"//     pm.expect(response.creation_date).to.eql(requestJson.creationDate);",
									"//     pm.expect(response.actor_id).to.eql(requestJson.actorId);",
									"// })",
									"// pm.test(\"Response body contains all expected fields\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response).to.have.property(\"title\");",
									"//     pm.expect(response).to.have.property(\"creation_date\");",
									"//     pm.expect(response).to.have.property(\"actor_id\");",
									"// });",
									"// pm.test(\"Response fields have correct data types\", () => {",
									"//     pm.expect(response.id).to.be.a(\"number\").and.be.above(0);",
									"//     pm.expect(response.title).to.be.a(\"string\");",
									"//     pm.expect(response.creation_date).to.be.a(\"string\");",
									"//     pm.expect(response.actor_id).to.be.a(\"number\").and.be.above(0);",
									"// });",
									"// pm.test(\"ID is present and is a positive integer\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response.id).to.be.a(\"number\");",
									"//     pm.expect(response.id).to.be.greaterThan(0);",
									"// });",
									"// pm.test(\"Creation date format is correct (YYYY-MM-DD)\", () => {",
									"//     const jsonData = pm.response.json();",
									"//     const datePattern = /^\\d{4}-\\d{2}-\\d{2}$/; // Regex for YYYY-MM-DD format",
									"//     pm.expect(jsonData.creation_date).to.match(datePattern);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is an object\", () => {",
									"//     pm.expect(response).to.be.an(\"object\");",
									"// });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Bohemian Rhapsody\",\n    \"creationDate\": \"2018-10-24\",\n    \"actorId\": {{actorId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{movieUrl}}",
							"host": [
								"{{movieUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete actor assigned to movie (failure) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"URL contains the correct actor ID\", () => {",
									"    const actorUrl = pm.variables.get(\"actorUrl\");        ",
									"    const actorId = pm.variables.get(\"actorId\");",
									"",
									"    const requestUrl = pm.request.url.toString();",
									"    pm.expect(requestUrl).to.include(`${actorUrl}/${actorId}`); ",
									"});",
									"pm.test(\"Request body is empty\", () => {",
									"    if (pm.request.body) {",
									"        pm.expect(pm.request.body.raw).to.be.undefined; ",
									"    } else {",
									"        pm.expect(pm.request.body).to.be.undefined; ",
									"    }",
									"}); ",
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(responseJson).to.not.have.any.keys(\"id\", \"first_name\", \"last_name\", \"date_of_birth\");",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(responseJson).to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(responseJson.message).to.eql(\"Cannot delete actor because they are assigned to a movie.\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(responseJson).to.have.property(\"message\");",
									"    pm.expect(responseJson.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(responseJson.message).to.not.be.empty;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{actorUrl}}/{{actorId}}",
							"host": [
								"{{actorUrl}}"
							],
							"path": [
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get deleted actor by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Response matches request body inputs\", () => {",
									"    actorId = pm.collectionVariables.get(\"actorId\")",
									"    firstName = pm.collectionVariables.get(\"actorFirstName\")",
									"    lastName = pm.collectionVariables.get(\"actorLastName\")",
									"    birthDate = pm.collectionVariables.get(\"actorDateOfBirth\")",
									"",
									"    pm.expect(response.id).to.be.eql(actorId)",
									"    pm.expect(response.first_name).to.be.eql(firstName)",
									"    pm.expect(response.last_name).to.be.eql(lastName)",
									"    pm.expect(response.date_of_birth).to.be.eql(birthDate)",
									"})",
									"pm.test(\"Response body contains all expected fields\", () => {",
									"    pm.expect(response).to.have.property(\"id\");",
									"    pm.expect(response).to.have.property(\"first_name\");",
									"    pm.expect(response).to.have.property(\"last_name\");",
									"    pm.expect(response).to.have.property(\"date_of_birth\");",
									"});",
									"pm.test(\"Response fields have correct data types\", () => {",
									"    pm.expect(response.id).to.be.a(\"number\").and.be.above(0);;",
									"    pm.expect(response.first_name).to.be.a(\"string\");",
									"    pm.expect(response.last_name).to.be.a(\"string\");",
									"    pm.expect(response.date_of_birth).to.be.a(\"string\");",
									"});",
									"pm.test(\"Fields are not empty\", () => {",
									"    pm.expect(response.first_name).to.not.be.empty;",
									"    pm.expect(response.last_name).to.not.be.empty;",
									"    pm.expect(response.date_of_birth).to.not.be.empty;",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"extra_field1\", \"extra_field2\");",
									"});",
									"pm.test(\"Date of birth is in correct format (YYYY-MM-DD)\", () => {",
									"    const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"    pm.expect(response.date_of_birth).to.match(dobRegex);",
									"});",
									"pm.test(\"Date of birth is a valid date\", () => {",
									"    const dob = new Date(response.date_of_birth);",
									"    pm.expect(dob.getFullYear()).to.eql(parseInt(response.date_of_birth.substring(0, 4), 10));",
									"    pm.expect(dob.getMonth() + 1).to.eql(parseInt(response.date_of_birth.substring(5, 7), 10));",
									"    pm.expect(dob.getDate()).to.eql(parseInt(response.date_of_birth.substring(8, 10), 10));",
									"});",
									"pm.test(\"ID is a positive integer\", () => {",
									"    pm.expect(response.id).to.be.a(\"number\");",
									"    pm.expect(response.id).to.be.greaterThan(0);",
									"});",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									"pm.test(\"Request body is empty\", () => {",
									"    if (pm.request.body) {",
									"        pm.expect(pm.request.body.raw).to.be.undefined; ",
									"    } else {",
									"        pm.expect(pm.request.body).to.be.undefined; ",
									"    }",
									"}); ",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{actorUrl}}/{{actorId}}",
							"host": [
								"{{actorUrl}}"
							],
							"path": [
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete non-existent actor (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Request URL contains the correct non-existent ID\", () => {",
									"    const actorUrl = pm.variables.get(\"actorUrl\");",
									"    const nonExistentId = pm.variables.get(\"nonExistentId\");",
									"    const requestUrl = pm.request.url.toString();",
									"    pm.expect(requestUrl).to.include(`${actorUrl}/${nonExistentId}`);",
									"});",
									"pm.test(\"Status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"first_name\", \"last_name\", \"date_of_birth\");",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"Actor not found\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									"pm.test(\"Request body is empty\", () => {",
									"    if (pm.request.body) {",
									"        pm.expect(pm.request.body.raw).to.be.undefined; ",
									"    } else {",
									"        pm.expect(pm.request.body).to.be.undefined; ",
									"    }",
									"}); ",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{actorUrl}}/{{nonExistentId}}",
							"host": [
								"{{actorUrl}}"
							],
							"path": [
								"{{nonExistentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"// pm.test(\"Response is an array\", () => {",
									"//     pm.expect(response).to.be.an('array');",
									"// });",
									"// pm.test(\"Saved actor details are present in the response\", () => {",
									"//     savedId = pm.collectionVariables.get(\"actorId\")",
									"//     savedFirstName = pm.collectionVariables.get(\"actorFirstName\")",
									"//     savedLastName = pm.collectionVariables.get(\"actorLastName\")",
									"//     savedDateOfBirth = pm.collectionVariables.get(\"actorDateOfBirth\")",
									"    ",
									"//     const actorFound = response.some(actor => ",
									"//         actor.id === Number(savedId) &&",
									"//         actor.first_name === savedFirstName &&",
									"//         actor.last_name === savedLastName &&",
									"//         actor.date_of_birth === savedDateOfBirth",
									"//     );",
									"//     pm.expect(actorFound).to.be.true;",
									"// });",
									"// pm.test(\"All items in the response array are objects\", () => {",
									"//     response.forEach(item => {",
									"//         pm.expect(item).to.be.an('object');",
									"//     });",
									"// });",
									"// pm.test(\"Each actor object contains required fields\", () => {",
									"//     response.forEach(actor => {",
									"//         pm.expect(actor).to.have.property('id').and.be.above(0);;",
									"//         pm.expect(actor).to.have.property('first_name');",
									"//         pm.expect(actor).to.have.property('last_name');",
									"//         pm.expect(actor).to.have.property('date_of_birth');",
									"//     });",
									"// });",
									"// pm.test(\"Each actor has the correct structure\", () => {",
									"//     response.forEach(actor => {",
									"//         pm.expect(actor).to.have.all.keys('id', 'first_name', 'last_name', 'date_of_birth');",
									"//     });",
									"// });",
									"// pm.test(\"Response does not contain unexpected fields\", () => {",
									"//     const validFields = ['id', 'first_name', 'last_name', 'date_of_birth'];",
									"//     response.forEach(actor => {",
									"//         Object.keys(actor).forEach(key => {",
									"//             pm.expect(validFields).to.include(key, `Unexpected field: ${key}`);",
									"//         });",
									"//     });",
									"// });",
									"// pm.test(\"Date of birth format is YYYY-MM-DD for all actors\", () => {",
									"//     const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"//     response.forEach(actor => {",
									"//         pm.expect(actor.date_of_birth).to.match(dateRegex);",
									"//     });",
									"// });",
									"// pm.test(\"Date of birth is not in the future\", () => {",
									"//     const today = new Date();",
									"//     response.forEach(actor => {",
									"//         const dob = new Date(actor.date_of_birth);",
									"//         pm.expect(dob).to.be.below(today);",
									"//     });",
									"// });",
									"// pm.test(\"Each actor has a unique ID\", () => {",
									"//     const ids = response.map(actor => actor.id);",
									"//     const uniqueIds = new Set(ids);",
									"//     pm.expect(uniqueIds.size).to.eql(ids.length);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is not empty\", () => {",
									"//     pm.expect(response).to.not.be.empty;",
									"// });",
									"// pm.test(\"Request body is empty\", () => {",
									"//     if (pm.request.body) {",
									"//         pm.expect(pm.request.body.raw).to.be.undefined; ",
									"//     } else {",
									"//         pm.expect(pm.request.body).to.be.undefined; ",
									"//     }",
									"// });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{actorUrl}}",
							"host": [
								"{{actorUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create movie functionality",
			"item": [
				{
					"name": "Create actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() //console.log (response)",
									"const requestBody = pm.request.body.raw",
									"const requestJson = JSON.parse(requestBody)",
									"",
									"//-----------------------------Variables---------------------------------//",
									"pm.collectionVariables.set(\"actorId\", response.id) ",
									"",
									"//-----------------------------Tests-------------------------------------//",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"// pm.test(\"Response matches request body inputs\", () =>{",
									"//     actorId = pm.collectionVariables.get(\"actorId\")",
									"",
									"//     pm.expect(response.id).to.eql(actorId);",
									"//     pm.expect(response.first_name).to.eql(requestJson.firstName);",
									"//     pm.expect(response.last_name).to.eql(requestJson.lastName);",
									"//     pm.expect(response.date_of_birth).to.eql(requestJson.dateOfBirth);",
									"// })",
									"// pm.test(\"Response body contains all expected fields\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response).to.have.property(\"first_name\");",
									"//     pm.expect(response).to.have.property(\"last_name\");",
									"//     pm.expect(response).to.have.property(\"date_of_birth\");",
									"// });",
									"// pm.test(\"Response fields have correct data types\", () => {",
									"//     pm.expect(response.id).to.be.a(\"number\").and.be.above(0);",
									"//     pm.expect(response.first_name).to.be.a(\"string\");",
									"//     pm.expect(response.last_name).to.be.a(\"string\");",
									"//     pm.expect(response.date_of_birth).to.be.a(\"string\");",
									"// });",
									"// pm.test(\"ID is present and is a positive integer\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response.id).to.be.a(\"number\");",
									"//     pm.expect(response.id).to.be.greaterThan(0);",
									"// });",
									"// pm.test(\"Date of birth is in correct format (YYYY-MM-DD)\", () => {",
									"//     const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"//     pm.expect(response.date_of_birth).to.match(dobRegex);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is an object\", () => {",
									"//     pm.expect(response).to.be.an(\"object\");",
									"// });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Leonardo\",\n    \"lastName\": \"DiCaprio\",\n    \"dateOfBirth\": \"1974-11-11\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{actorUrl}}",
							"host": [
								"{{actorUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create movie with actor ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() //console.log (response)",
									"const requestBody = pm.request.body.raw",
									"const requestJson = JSON.parse(requestBody)",
									"",
									"//-----------------------------Variables---------------------------------//",
									"pm.collectionVariables.set(\"movieId\", response.id) ",
									"pm.collectionVariables.set(\"movieTitle\", requestJson.title)",
									"pm.collectionVariables.set(\"movieCreationDate\", requestJson.creationDate)",
									"",
									"//-----------------------------Tests-------------------------------------//",
									"pm.test(\"Response matches request body inputs\", () =>{",
									"    movieId = pm.collectionVariables.get(\"movieId\")",
									"",
									"    pm.expect(response.id).to.eql(movieId);",
									"    pm.expect(response.title).to.eql(requestJson.title);",
									"    pm.expect(response.creation_date).to.eql(requestJson.creationDate);",
									"    pm.expect(response.actor_id).to.eql(requestJson.actorId);",
									"})",
									"pm.test(\"Response body contains all expected fields\", () => {",
									"    pm.expect(response).to.have.property(\"id\");",
									"    pm.expect(response).to.have.property(\"title\");",
									"    pm.expect(response).to.have.property(\"creation_date\");",
									"    pm.expect(response).to.have.property(\"actor_id\");",
									"});",
									"pm.test(\"Response fields have correct data types\", () => {",
									"    pm.expect(response.id).to.be.a(\"number\").and.be.above(0);",
									"    pm.expect(response.title).to.be.a(\"string\");",
									"    pm.expect(response.creation_date).to.be.a(\"string\");",
									"    pm.expect(response.actor_id).to.be.a(\"number\").and.be.above(0);",
									"});",
									"pm.test(\"ID is present and is a positive integer\", () => {",
									"    pm.expect(response).to.have.property(\"id\");",
									"    pm.expect(response.id).to.be.a(\"number\");",
									"    pm.expect(response.id).to.be.greaterThan(0);",
									"});",
									"pm.test(\"Creation date format is correct (YYYY-MM-DD)\", () => {",
									"    const jsonData = pm.response.json();",
									"    const datePattern = /^\\d{4}-\\d{2}-\\d{2}$/; ",
									"    pm.expect(jsonData.creation_date).to.match(datePattern);",
									"});",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Inception\",\n    \"creationDate\": \"2010-07-16\",\n    \"actorId\": {{actorId}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{movieUrl}}",
							"host": [
								"{{movieUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get movie by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"// pm.test(\"Response matches request body inputs\", () => {",
									"//     movieId = pm.collectionVariables.get(\"movieId\")",
									"//     title = pm.collectionVariables.get(\"movieTitle\")",
									"//     creationDate = pm.collectionVariables.get(\"movieCreationDate\")",
									"//     actorId = pm.collectionVariables.get(\"actorId\")",
									"",
									"//     pm.expect(response.id).to.be.eql(movieId)",
									"//     pm.expect(response.title).to.be.eql(title)",
									"//     pm.expect(response.creation_date).to.be.eql(creationDate)",
									"//     pm.expect(response.actor_id).to.be.eql(actorId)",
									"// })",
									"// pm.test(\"Response body contains all expected fields\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response).to.have.property(\"title\");",
									"//     pm.expect(response).to.have.property(\"creation_date\");",
									"//     pm.expect(response).to.have.property(\"actor_id\");",
									"// });",
									"// pm.test(\"Response fields have correct data types\", () => {",
									"//     pm.expect(response.id).to.be.a(\"number\").and.be.above(0);;",
									"//     pm.expect(response.title).to.be.a(\"string\");",
									"//     pm.expect(response.creation_date).to.be.a(\"string\");",
									"//     pm.expect(response.actor_id).to.be.a(\"number\").and.be.above(0);;",
									"// });",
									"// pm.test(\"Fields are not empty\", () => {",
									"//     pm.expect(response.title).to.not.be.empty;",
									"//     pm.expect(response.creation_date).to.not.be.empty;",
									"// });",
									"// pm.test(\"Response does not contain unexpected fields\", () => {",
									"//     pm.expect(response).to.not.have.any.keys(\"extra_field1\", \"extra_field2\");",
									"// });",
									"// pm.test(\"Creation date is in correct format (YYYY-MM-DD)\", () => {",
									"//     const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"//     pm.expect(response.creation_date).to.match(dobRegex);",
									"// });",
									"// pm.test(\"Creation date is a valid date\", () => {",
									"//     const dob = new Date(response.creation_date);",
									"//     pm.expect(dob.getFullYear()).to.eql(parseInt(response.creation_date.substring(0, 4), 10));",
									"//     pm.expect(dob.getMonth() + 1).to.eql(parseInt(response.creation_date.substring(5, 7), 10));",
									"//     pm.expect(dob.getDate()).to.eql(parseInt(response.creation_date.substring(8, 10), 10));",
									"// });",
									"// pm.test(\"ID is a positive integer\", () => {",
									"//     pm.expect(response.id).to.be.a(\"number\");",
									"//     pm.expect(response.id).to.be.greaterThan(0);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is an object\", () => {",
									"//     pm.expect(response).to.be.an(\"object\");",
									"// });",
									"// pm.test(\"Request body is empty\", () => {",
									"//     if (pm.request.body) {",
									"//         pm.expect(pm.request.body.raw).to.be.undefined; ",
									"//     } else {",
									"//         pm.expect(pm.request.body).to.be.undefined; ",
									"//     }",
									"// }); ",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{movieUrl}}/{{movieId}}",
							"host": [
								"{{movieUrl}}"
							],
							"path": [
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create movie without title (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" response = pm.response.json() ",
									"",
									"pm.test(\"Request body does not contain 'title'\", () => {",
									"    const requestBody = pm.request.body.raw;",
									"    const request = JSON.parse(requestBody); //console.log(request)",
									"    pm.expect(request).to.not.have.property(\"title\");",
									"});",
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"Title cannot be empty.\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"title\", \"creation_date\", \"actor_id\");",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"creationDate\": \"1997-12-19\",\n    \"actorId\": {{actorId}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{movieUrl}}",
							"host": [
								"{{movieUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create movie without date of creation (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" response = pm.response.json() ",
									"",
									"pm.test(\"Request body does not contain 'creationDate'\", () => {",
									"    const requestBody = pm.request.body.raw;",
									"    const request = JSON.parse(requestBody); //console.log(request)",
									"    pm.expect(request).to.not.have.property(\"creationDate\");",
									"});",
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"Creation date cannot be empty.\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"title\", \"creation_date\", \"actor_id\");",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Titanic\",\n    \"actorId\": {{actorId}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{movieUrl}}",
							"host": [
								"{{movieUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create movie without actor ID (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" response = pm.response.json() ",
									"",
									"pm.test(\"Request body does not contain 'actorId'\", () => {",
									"    const requestBody = pm.request.body.raw;",
									"    const request = JSON.parse(requestBody); //console.log(request)",
									"    pm.expect(request).to.not.have.property(\"actorId\");",
									"});",
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"Actor ID must be supplied.\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"title\", \"creation_date\", \"actor_id\");",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Titanic\",\n    \"creationDate\": \"1997-12-19\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{movieUrl}}",
							"host": [
								"{{movieUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create movie with non-existent actor ID (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" response = pm.response.json() ",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"Actor not found\");",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"title\", \"creation_date\", \"actor_id\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Titanic\",\n    \"creationDate\": \"1997-12-19\",\n    \"actorId\": {{nonExistentId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{movieUrl}}",
							"host": [
								"{{movieUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"// pm.test(\"Response is an array\", () => {",
									"//     pm.expect(response).to.be.an('array');",
									"// });",
									"// pm.test(\"Saved last movie details are present in the response\", () => {",
									"//     movieId = pm.collectionVariables.get(\"movieId\")",
									"//     title = pm.collectionVariables.get(\"movieTitle\")",
									"//     creationDate = pm.collectionVariables.get(\"movieCreationDate\")",
									"//     actorId = pm.collectionVariables.get(\"actorId\")",
									"",
									"//     const actorFound = response.some(actor => ",
									"//         actor.id === Number(movieId) &&",
									"//         actor.title === title &&",
									"//         actor.creation_date === creationDate &&",
									"//         actor.actor_id === actorId",
									"//     );",
									"//     pm.expect(actorFound).to.be.true;",
									"// });",
									"// pm.test(\"All items in the response array are objects\", () => {",
									"//     response.forEach(item => {",
									"//         pm.expect(item).to.be.an('object');",
									"//     });",
									"// });",
									"// pm.test(\"Each movie object contains required fields\", () => {",
									"//     response.forEach(movie => {",
									"//         pm.expect(movie).to.have.property('id').and.be.above(0);;",
									"//         pm.expect(movie).to.have.property('title');",
									"//         pm.expect(movie).to.have.property('creation_date');",
									"//         pm.expect(movie).to.have.property('actor_id');",
									"//     });",
									"// });",
									"// pm.test(\"Valid field types\", () => {",
									"//     response.forEach(movie => {",
									"//         pm.expect(movie.id).to.be.a('number').and.be.above(0);;",
									"//         pm.expect(movie.title).to.be.a('string');",
									"//         pm.expect(movie.creation_date).to.be.a('string');",
									"//         pm.expect(movie.actor_id).to.be.a('number').and.be.above(0);;",
									"//     });",
									"// });",
									"// pm.test(\"Each movie has the correct structure\", () => {",
									"//     response.forEach(actor => {",
									"//         pm.expect(actor).to.have.all.keys('id', 'title', 'creation_date', 'actor_id');",
									"//     });",
									"// });",
									"// pm.test(\"Response does not contain unexpected fields\", () => {",
									"//     const validFields = ['id', 'title', 'creation_date', 'actor_id'];",
									"//     response.forEach(movie => {",
									"//         Object.keys(movie).forEach(key => {",
									"//             pm.expect(validFields).to.include(key, `Unexpected field: ${key}`);",
									"//         });",
									"//     });",
									"// });",
									"// pm.test(\"Creation date format is YYYY-MM-DD for all movies\", () => {",
									"//     const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"//     response.forEach(actor => {",
									"//         pm.expect(actor.creation_date).to.match(dateRegex);",
									"//     });",
									"// });",
									"// pm.test(\"Creation date is not in the future\", () => {",
									"//     const today = new Date();",
									"//     response.forEach(actor => {",
									"//         const dob = new Date(actor.creation_date);",
									"//         pm.expect(dob).to.be.below(today);",
									"//     });",
									"// });",
									"// pm.test(\"Each movie has a unique ID\", () => {",
									"//     const ids = response.map(actor => actor.id);",
									"//     const uniqueIds = new Set(ids);",
									"//     pm.expect(uniqueIds.size).to.eql(ids.length);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is not empty\", () => {",
									"//     pm.expect(response).to.not.be.empty;",
									"// });",
									"// pm.test(\"Request body is empty\", () => {",
									"//     if (pm.request.body) {",
									"//         pm.expect(pm.request.body.raw).to.be.undefined; ",
									"//     } else {",
									"//         pm.expect(pm.request.body).to.be.undefined; ",
									"//     }",
									"// }); ",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{movieUrl}}",
							"host": [
								"{{movieUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Retrieve movies functionality",
			"item": [
				{
					"name": "Create actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() //console.log (response)",
									"const requestBody = pm.request.body.raw",
									"const requestJson = JSON.parse(requestBody)",
									"",
									"//-----------------------------Variables---------------------------------//",
									"pm.collectionVariables.set(\"actorId\", response.id) ",
									"",
									"//-----------------------------Tests-------------------------------------//",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"// pm.test(\"Response matches request body inputs\", () =>{",
									"//     actorId = pm.collectionVariables.get(\"actorId\")",
									"",
									"//     pm.expect(response.id).to.eql(actorId);",
									"//     pm.expect(response.first_name).to.eql(requestJson.firstName);",
									"//     pm.expect(response.last_name).to.eql(requestJson.lastName);",
									"//     pm.expect(response.date_of_birth).to.eql(requestJson.dateOfBirth);",
									"// })",
									"// pm.test(\"Response body contains all expected fields\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response).to.have.property(\"first_name\");",
									"//     pm.expect(response).to.have.property(\"last_name\");",
									"//     pm.expect(response).to.have.property(\"date_of_birth\");",
									"// });",
									"// pm.test(\"Response fields have correct data types\", () => {",
									"//     pm.expect(response.id).to.be.a(\"number\").and.be.above(0);",
									"//     pm.expect(response.first_name).to.be.a(\"string\");",
									"//     pm.expect(response.last_name).to.be.a(\"string\");",
									"//     pm.expect(response.date_of_birth).to.be.a(\"string\");",
									"// });",
									"// pm.test(\"ID is present and is a positive integer\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response.id).to.be.a(\"number\");",
									"//     pm.expect(response.id).to.be.greaterThan(0);",
									"// });",
									"// pm.test(\"Date of birth is in correct format (YYYY-MM-DD)\", () => {",
									"//     const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"//     pm.expect(response.date_of_birth).to.match(dobRegex);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is an object\", () => {",
									"//     pm.expect(response).to.be.an(\"object\");",
									"// });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Morgan\",\n    \"lastName\": \"Freeman\",\n    \"dateOfBirth\": \"1937-06-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{actorUrl}}",
							"host": [
								"{{actorUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create movie with actor ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() //console.log (response)",
									"const requestBody = pm.request.body.raw",
									"const requestJson = JSON.parse(requestBody)",
									"",
									"//-----------------------------Variables---------------------------------//",
									"pm.collectionVariables.set(\"movieId\", response.id) ",
									"pm.collectionVariables.set(\"movieTitle\", requestJson.title)",
									"pm.collectionVariables.set(\"movieCreationDate\", requestJson.creationDate)",
									"pm.collectionVariables.set(\"movieUrl\", \"http://localhost:3000/movies\");",
									"pm.collectionVariables.set(\"nonExistentId\", \"99999999\");",
									"",
									"//-----------------------------Tests-------------------------------------//",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"// pm.test(\"Response matches request body inputs\", () =>{",
									"//     movieId = pm.collectionVariables.get(\"movieId\")",
									"",
									"//     pm.expect(response.id).to.eql(movieId);",
									"//     pm.expect(response.title).to.eql(requestJson.title);",
									"//     pm.expect(response.creation_date).to.eql(requestJson.creationDate);",
									"//     pm.expect(response.actor_id).to.eql(requestJson.actorId);",
									"// })",
									"// pm.test(\"Response body contains all expected fields\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response).to.have.property(\"title\");",
									"//     pm.expect(response).to.have.property(\"creation_date\");",
									"//     pm.expect(response).to.have.property(\"actor_id\");",
									"// });",
									"// pm.test(\"Response fields have correct data types\", () => {",
									"//     pm.expect(response.id).to.be.a(\"number\").and.be.above(0);",
									"//     pm.expect(response.title).to.be.a(\"string\");",
									"//     pm.expect(response.creation_date).to.be.a(\"string\");",
									"//     pm.expect(response.actor_id).to.be.a(\"number\").and.be.above(0);",
									"// });",
									"// pm.test(\"ID is present and is a positive integer\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response.id).to.be.a(\"number\");",
									"//     pm.expect(response.id).to.be.greaterThan(0);",
									"// });",
									"// pm.test(\"Creation date format is correct (YYYY-MM-DD)\", () => {",
									"//     const jsonData = pm.response.json();",
									"//     const datePattern = /^\\d{4}-\\d{2}-\\d{2}$/; ",
									"//     pm.expect(jsonData.creation_date).to.match(datePattern);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is an object\", () => {",
									"//     pm.expect(response).to.be.an(\"object\");",
									"// });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"The Shawshank Redemption\",\n    \"creationDate\": \"1994-09-23\",\n    \"actorId\": {{actorId}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{movieUrl}}",
							"host": [
								"{{movieUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get movie by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Response matches request body inputs\", () => {",
									"    movieId = pm.collectionVariables.get(\"movieId\")",
									"    title = pm.collectionVariables.get(\"movieTitle\")",
									"    creationDate = pm.collectionVariables.get(\"movieCreationDate\")",
									"    actorId = pm.collectionVariables.get(\"actorId\")",
									"",
									"    pm.expect(response.id).to.be.eql(movieId)",
									"    pm.expect(response.title).to.be.eql(title)",
									"    pm.expect(response.creation_date).to.be.eql(creationDate)",
									"    pm.expect(response.actor_id).to.be.eql(actorId)",
									"})",
									"pm.test(\"Response body contains all expected fields\", () => {",
									"    pm.expect(response).to.have.property(\"id\");",
									"    pm.expect(response).to.have.property(\"title\");",
									"    pm.expect(response).to.have.property(\"creation_date\");",
									"    pm.expect(response).to.have.property(\"actor_id\");",
									"});",
									"pm.test(\"Response fields have correct data types\", () => {",
									"    pm.expect(response.id).to.be.a(\"number\").and.be.above(0);;",
									"    pm.expect(response.title).to.be.a(\"string\");",
									"    pm.expect(response.creation_date).to.be.a(\"string\");",
									"    pm.expect(response.actor_id).to.be.a(\"number\").and.be.above(0);;",
									"});",
									"pm.test(\"Fields are not empty\", () => {",
									"    pm.expect(response.title).to.not.be.empty;",
									"    pm.expect(response.creation_date).to.not.be.empty;",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"extra_field1\", \"extra_field2\");",
									"});",
									"pm.test(\"Date of creation is in correct format (YYYY-MM-DD)\", () => {",
									"    const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"    pm.expect(response.creation_date).to.match(dobRegex);",
									"});",
									"pm.test(\"Date of creation is a valid date\", () => {",
									"    const dob = new Date(response.creation_date);",
									"    pm.expect(dob.getFullYear()).to.eql(parseInt(response.creation_date.substring(0, 4), 10));",
									"    pm.expect(dob.getMonth() + 1).to.eql(parseInt(response.creation_date.substring(5, 7), 10));",
									"    pm.expect(dob.getDate()).to.eql(parseInt(response.creation_date.substring(8, 10), 10));",
									"});",
									"pm.test(\"ID is a positive integer\", () => {",
									"    pm.expect(response.id).to.be.a(\"number\");",
									"    pm.expect(response.id).to.be.greaterThan(0);",
									"});",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									"pm.test(\"Request body is empty\", () => {",
									"    if (pm.request.body) {",
									"        pm.expect(pm.request.body.raw).to.be.undefined; ",
									"    } else {",
									"        pm.expect(pm.request.body).to.be.undefined; ",
									"    }",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{movieUrl}}/{{movieId}}",
							"host": [
								"{{movieUrl}}"
							],
							"path": [
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get movie by non-existent ID (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Request URL contains the correct non-existent ID\", () => {",
									"    const movieUrl = pm.variables.get(\"movieUrl\");",
									"    const nonExistentId = pm.variables.get(\"nonExistentId\");",
									"    const requestUrl = pm.request.url.toString();",
									"    pm.expect(requestUrl).to.include(`${movieUrl}/${nonExistentId}`);",
									"});",
									"pm.test(\"Status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"title\", \"creation_date\", \"actor_id\");",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"Movie not found\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									"pm.test(\"Request body is empty\", () => {",
									"    if (pm.request.body) {",
									"        pm.expect(pm.request.body.raw).to.be.undefined; ",
									"    } else {",
									"        pm.expect(pm.request.body).to.be.undefined; ",
									"    }",
									"}); ",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{movieUrl}}/{{nonExistentId}}",
							"host": [
								"{{movieUrl}}"
							],
							"path": [
								"{{nonExistentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Response is an array\", () => {",
									"    pm.expect(response).to.be.an('array');",
									"});",
									"pm.test(\"Saved last movie details are present in the response\", () => {",
									"    movieId = pm.collectionVariables.get(\"movieId\")",
									"    title = pm.collectionVariables.get(\"movieTitle\")",
									"    creationDate = pm.collectionVariables.get(\"movieCreationDate\")",
									"    actorId = pm.collectionVariables.get(\"actorId\")",
									"",
									"    const actorFound = response.some(actor => ",
									"        actor.id === Number(movieId) &&",
									"        actor.title === title &&",
									"        actor.creation_date === creationDate &&",
									"        actor.actor_id === actorId",
									"    );",
									"    pm.expect(actorFound).to.be.true;",
									"});",
									"pm.test(\"All items in the response array are objects\", () => {",
									"    response.forEach(item => {",
									"        pm.expect(item).to.be.an('object');",
									"    });",
									"});",
									"pm.test(\"Each movie object contains required fields\", () => {",
									"    response.forEach(movie => {",
									"        pm.expect(movie).to.have.property('id').and.be.above(0);;",
									"        pm.expect(movie).to.have.property('title');",
									"        pm.expect(movie).to.have.property('creation_date');",
									"        pm.expect(movie).to.have.property('actor_id');",
									"    });",
									"});",
									"pm.test(\"Valid field types\", () => {",
									"    response.forEach(movie => {",
									"        pm.expect(movie.id).to.be.a('number').and.be.above(0);;",
									"        pm.expect(movie.title).to.be.a('string');",
									"        pm.expect(movie.creation_date).to.be.a('string');",
									"        pm.expect(movie.actor_id).to.be.a('number').and.be.above(0);;",
									"    });",
									"});",
									"pm.test(\"Each movie has the correct structure\", () => {",
									"    response.forEach(actor => {",
									"        pm.expect(actor).to.have.all.keys('id', 'title', 'creation_date', 'actor_id');",
									"    });",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    const validFields = ['id', 'title', 'creation_date', 'actor_id'];",
									"    response.forEach(movie => {",
									"        Object.keys(movie).forEach(key => {",
									"            pm.expect(validFields).to.include(key, `Unexpected field: ${key}`);",
									"        });",
									"    });",
									"});",
									"pm.test(\"Date of creation format is YYYY-MM-DD for all movies\", () => {",
									"    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"    response.forEach(actor => {",
									"        pm.expect(actor.creation_date).to.match(dateRegex);",
									"    });",
									"});",
									"pm.test(\"Date of creation is not in the future\", () => {",
									"    const today = new Date();",
									"    response.forEach(actor => {",
									"        const dob = new Date(actor.creation_date);",
									"        pm.expect(dob).to.be.below(today);",
									"    });",
									"});",
									"pm.test(\"Each movie has a unique ID\", () => {",
									"    const ids = response.map(actor => actor.id);",
									"    const uniqueIds = new Set(ids);",
									"    pm.expect(uniqueIds.size).to.eql(ids.length);",
									"});",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response is not empty\", () => {",
									"    pm.expect(response).to.not.be.empty;",
									"});",
									"pm.test(\"Request body is empty\", () => {",
									"    if (pm.request.body) {",
									"        pm.expect(pm.request.body.raw).to.be.undefined; ",
									"    } else {",
									"        pm.expect(pm.request.body).to.be.undefined; ",
									"    }",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{movieUrl}}",
							"host": [
								"{{movieUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update movies functionality",
			"item": [
				{
					"name": "Create actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() //console.log (response)",
									"const requestBody = pm.request.body.raw",
									"const requestJson = JSON.parse(requestBody)",
									"",
									"//-----------------------------Variables---------------------------------//",
									"pm.collectionVariables.set(\"actorId\", response.id) ",
									"pm.collectionVariables.set(\"nonExistentId\", \"99999999\");",
									"",
									"//-----------------------------Tests-------------------------------------//",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"// pm.test(\"Response matches request body inputs\", () =>{",
									"//     actorId = pm.collectionVariables.get(\"actorId\")",
									"",
									"//     pm.expect(response.id).to.eql(actorId);",
									"//     pm.expect(response.first_name).to.eql(requestJson.firstName);",
									"//     pm.expect(response.last_name).to.eql(requestJson.lastName);",
									"//     pm.expect(response.date_of_birth).to.eql(requestJson.dateOfBirth);",
									"// })",
									"// pm.test(\"Response body contains all expected fields\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response).to.have.property(\"first_name\");",
									"//     pm.expect(response).to.have.property(\"last_name\");",
									"//     pm.expect(response).to.have.property(\"date_of_birth\");",
									"// });",
									"// pm.test(\"Response fields have correct data types\", () => {",
									"//     pm.expect(response.id).to.be.a(\"number\").and.be.above(0);",
									"//     pm.expect(response.first_name).to.be.a(\"string\");",
									"//     pm.expect(response.last_name).to.be.a(\"string\");",
									"//     pm.expect(response.date_of_birth).to.be.a(\"string\");",
									"// });",
									"// pm.test(\"ID is present and is a positive integer\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response.id).to.be.a(\"number\");",
									"//     pm.expect(response.id).to.be.greaterThan(0);",
									"// });",
									"// pm.test(\"Date of creation is in correct format (YYYY-MM-DD)\", () => {",
									"//     const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"//     pm.expect(response.date_of_birth).to.match(dobRegex);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is an object\", () => {",
									"//     pm.expect(response).to.be.an(\"object\");",
									"// });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Scarlett\",\n    \"lastName\": \"Johansson\",\n    \"dateOfBirth\": \"1984-11-22\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{actorUrl}}",
							"host": [
								"{{actorUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create movie with actor ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() //console.log (response)",
									"const requestBody = pm.request.body.raw",
									"const requestJson = JSON.parse(requestBody)",
									"",
									"//-----------------------------Variables---------------------------------//",
									"pm.collectionVariables.set(\"movieId\", response.id) ",
									"pm.collectionVariables.set(\"movieTitle\", requestJson.title)",
									"pm.collectionVariables.set(\"movieCreationDate\", requestJson.creationDate)",
									"pm.collectionVariables.set(\"movieUrl\", \"http://localhost:3000/movies\");",
									"pm.collectionVariables.set(\"nonExistentId\", \"99999999\");",
									"",
									"//-----------------------------Tests-------------------------------------//",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"// pm.test(\"Response matches request body inputs\", () =>{",
									"//     movieId = pm.collectionVariables.get(\"movieId\")",
									"",
									"//     pm.expect(response.id).to.eql(movieId);",
									"//     pm.expect(response.title).to.eql(requestJson.title);",
									"//     pm.expect(response.creation_date).to.eql(requestJson.creationDate);",
									"//     pm.expect(response.actor_id).to.eql(requestJson.actorId);",
									"// })",
									"// pm.test(\"Response body contains all expected fields\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response).to.have.property(\"title\");",
									"//     pm.expect(response).to.have.property(\"creation_date\");",
									"//     pm.expect(response).to.have.property(\"actor_id\");",
									"// });",
									"// pm.test(\"Response fields have correct data types\", () => {",
									"//     pm.expect(response.id).to.be.a(\"number\").and.be.above(0);",
									"//     pm.expect(response.title).to.be.a(\"string\");",
									"//     pm.expect(response.creation_date).to.be.a(\"string\");",
									"//     pm.expect(response.actor_id).to.be.a(\"number\").and.be.above(0);",
									"// });",
									"// pm.test(\"ID is present and is a positive integer\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response.id).to.be.a(\"number\");",
									"//     pm.expect(response.id).to.be.greaterThan(0);",
									"// });",
									"// pm.test(\"Creation date format is correct (YYYY-MM-DD)\", () => {",
									"//     const jsonData = pm.response.json();",
									"//     const datePattern = /^\\d{4}-\\d{2}-\\d{2}$/; // Regex for YYYY-MM-DD format",
									"//     pm.expect(jsonData.creation_date).to.match(datePattern);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is an object\", () => {",
									"//     pm.expect(response).to.be.an(\"object\");",
									"// });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Translation\",\n    \"creationDate\": \"2003-09-12\",\n    \"actorId\": {{actorId}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{movieUrl}}",
							"host": [
								"{{movieUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() //console.log (response)",
									"const requestBody = pm.request.body.raw",
									"const requestJson = JSON.parse(requestBody)",
									"",
									"//-----------------------------Variables---------------------------------//",
									"pm.collectionVariables.set(\"movieId\", response.id) ",
									"pm.collectionVariables.set(\"movieTitle\", requestJson.title)",
									"pm.collectionVariables.set(\"movieCreationDate\", requestJson.creationDate)",
									"",
									"//-----------------------------Tests-------------------------------------//",
									"pm.test(\"Response matches request body inputs\", () =>{",
									"    movieId = pm.collectionVariables.get(\"movieId\")",
									"",
									"    pm.expect(response.id).to.eql(movieId);",
									"    pm.expect(response.title).to.eql(requestJson.title);",
									"    pm.expect(response.creation_date).to.eql(requestJson.creationDate);",
									"    pm.expect(response.actor_id).to.eql(requestJson.actorId);",
									"})",
									"pm.test(\"Response body contains all expected fields\", () => {",
									"    pm.expect(response).to.have.property(\"id\");",
									"    pm.expect(response).to.have.property(\"title\");",
									"    pm.expect(response).to.have.property(\"creation_date\");",
									"    pm.expect(response).to.have.property(\"actor_id\");",
									"});",
									"pm.test(\"Response fields have correct data types\", () => {",
									"    pm.expect(response.id).to.be.a(\"number\").and.be.above(0);",
									"    pm.expect(response.title).to.be.a(\"string\");",
									"    pm.expect(response.creation_date).to.be.a(\"string\");",
									"    pm.expect(response.actor_id).a(\"number\").and.be.above(0);",
									"});",
									"pm.test(\"ID is present and is a positive integer\", () => {",
									"    pm.expect(response).to.have.property(\"id\");",
									"    pm.expect(response.id).to.be.a(\"number\");",
									"    pm.expect(response.id).to.be.greaterThan(0);",
									"});",
									"pm.test(\"Date of creation is in correct format (YYYY-MM-DD)\", () => {",
									"    const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"    pm.expect(response.creation_date).to.match(dobRegex);",
									"});",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Lost in Translation\",\n    \"creationDate\": \"2003-09-12\",\n    \"actorId\": {{actorId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{movieUrl}}/{{movieId}}",
							"host": [
								"{{movieUrl}}"
							],
							"path": [
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get updated movie by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Response matches the updated inputs\", () => {",
									"    movieId = pm.collectionVariables.get(\"movieId\")",
									"    movieTitle = pm.collectionVariables.get(\"movieTitle\")",
									"    movieCreationDate = pm.collectionVariables.get(\"movieCreationDate\")",
									"    actorId = pm.collectionVariables.get(\"actorId\")",
									"",
									"    pm.expect(response.id).to.be.eql(movieId)",
									"    pm.expect(response.title).to.be.eql(movieTitle)",
									"    pm.expect(response.creation_date).to.be.eql(movieCreationDate)",
									"    pm.expect(response.actor_id).to.be.eql(actorId)",
									"})",
									"pm.test(\"Response body contains all expected fields\", () => {",
									"    pm.expect(response).to.have.property(\"id\");",
									"    pm.expect(response).to.have.property(\"title\");",
									"    pm.expect(response).to.have.property(\"creation_date\");",
									"    pm.expect(response).to.have.property(\"actor_id\");",
									"});",
									"pm.test(\"Response fields have correct data types\", () => {",
									"    pm.expect(response.id).to.be.a(\"number\").and.be.above(0);;",
									"    pm.expect(response.title).to.be.a(\"string\");",
									"    pm.expect(response.creation_date).to.be.a(\"string\");",
									"    pm.expect(response.actor_id).to.be.a(\"number\").and.be.above(0);;",
									"});",
									"pm.test(\"Fields are not empty\", () => {",
									"    pm.expect(response.title).to.not.be.empty;",
									"    pm.expect(response.creation_date).to.not.be.empty;",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"extra_field1\", \"extra_field2\");",
									"});",
									"pm.test(\"Date of creation is in correct format (YYYY-MM-DD)\", () => {",
									"    const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"    pm.expect(response.creation_date).to.match(dobRegex);",
									"});",
									"pm.test(\"Date of creation is a valid date\", () => {",
									"    const dob = new Date(response.creation_date);",
									"    pm.expect(dob.getFullYear()).to.eql(parseInt(response.creation_date.substring(0, 4), 10));",
									"    pm.expect(dob.getMonth() + 1).to.eql(parseInt(response.creation_date.substring(5, 7), 10));",
									"    pm.expect(dob.getDate()).to.eql(parseInt(response.creation_date.substring(8, 10), 10));",
									"});",
									"pm.test(\"ID is a positive integer\", () => {",
									"    pm.expect(response.id).to.be.a(\"number\");",
									"    pm.expect(response.id).to.be.greaterThan(0);",
									"});",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									"pm.test(\"Request body is emptyyy\", () => {",
									"    if (pm.request.body) {",
									"        pm.expect(pm.request.body.raw).to.be.undefined; ",
									"    } else {",
									"        pm.expect(pm.request.body).to.be.undefined; ",
									"    }",
									"}); ",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{movieUrl}}/{{movieId}}",
							"host": [
								"{{movieUrl}}"
							],
							"path": [
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update movie without title (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Request body does not contain 'title'\", () => {",
									"    const requestBody = pm.request.body.raw;",
									"    const request = JSON.parse(requestBody); ",
									"    pm.expect(request).to.not.have.property(\"title\");",
									"});",
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"Title, creation date, and actor ID must be provided.\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"title\", \"creation_date\", \"actor_id\");",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"creationDate\": \"2012-05-04\",\n    \"actorId\": {{actorId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{movieUrl}}/{{movieId}}",
							"host": [
								"{{movieUrl}}"
							],
							"path": [
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update movie without date of creation (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Request body does not contain 'creationDate'\", () => {",
									"    const requestBody = pm.request.body.raw;",
									"    const request = JSON.parse(requestBody); ",
									"    pm.expect(request).to.not.have.property(\"creationDate\");",
									"});",
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"Title, creation date, and actor ID must be provided.\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"title\", \"creation_date\", \"actor_id\");",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"The Avengers\",\n    \"actorId\": {{actorId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{movieUrl}}/{{movieId}}",
							"host": [
								"{{movieUrl}}"
							],
							"path": [
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update movie without actor ID (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Request body does not contain 'actorId'\", () => {",
									"    const requestBody = pm.request.body.raw;",
									"    const request = JSON.parse(requestBody); ",
									"    pm.expect(request).to.not.have.property(\"actoactorIdr_id\");",
									"});",
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"Title, creation date, and actor ID must be provided.\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"title\", \"creation_date\", \"actor_id\");",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"The Avengers\",\n    \"creationDate\": \"2012-05-04\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{movieUrl}}/{{movieId}}",
							"host": [
								"{{movieUrl}}"
							],
							"path": [
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update movie with non-existent actor ID (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Status code is 404 Bad Request\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"Actor not found\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"title\", \"creation_date\", \"actor_id\");",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"The Avengers\",\n    \"creationDate\": \"2012-05-04\",\n    \"actorId\": {{nonExistentId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{movieUrl}}/{{movieId}}",
							"host": [
								"{{movieUrl}}"
							],
							"path": [
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update non-existent movie (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Request URL contains the correct non-existent ID\", () => {",
									"    const movieUrl = pm.variables.get(\"movieUrl\");",
									"    const nonExistentId = pm.variables.get(\"nonExistentId\");",
									"    console.log(nonExistentId)",
									"    const requestUrl = pm.request.url.toString();",
									"    pm.expect(requestUrl).to.include(`${movieUrl}/${nonExistentId}`);",
									"});",
									"pm.test(\"Status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"Movie not found\");",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"title\", \"creation_date\", \"actor_id\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"The Avengers\",\n    \"creationDate\": \"2012-05-04\",\n    \"actorId\": {{actorId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{movieUrl}}/{{nonExistentId}}",
							"host": [
								"{{movieUrl}}"
							],
							"path": [
								"{{nonExistentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"// pm.test(\"Response is an array\", () => {",
									"//     pm.expect(response).to.be.an('array');",
									"// });",
									"// pm.test(\"Saved last movie details are present in the response\", () => {",
									"//     movieId = pm.collectionVariables.get(\"movieId\")",
									"//     title = pm.collectionVariables.get(\"movieTitle\")",
									"//     creationDate = pm.collectionVariables.get(\"movieCreationDate\")",
									"//     actorId = pm.collectionVariables.get(\"actorId\")",
									"",
									"//     const actorFound = response.some(actor => ",
									"//         actor.id === Number(movieId) &&",
									"//         actor.title === title &&",
									"//         actor.creation_date === creationDate &&",
									"//         actor.actor_id === actorId",
									"//     );",
									"//     pm.expect(actorFound).to.be.true;",
									"// });",
									"// pm.test(\"All items in the response array are objects\", () => {",
									"//     response.forEach(item => {",
									"//         pm.expect(item).to.be.an('object');",
									"//     });",
									"// });",
									"// pm.test(\"Each movie object contains required fields\", () => {",
									"//     response.forEach(movie => {",
									"//         pm.expect(movie).to.have.property('id').and.be.above(0);;",
									"//         pm.expect(movie).to.have.property('title');",
									"//         pm.expect(movie).to.have.property('creation_date');",
									"//         pm.expect(movie).to.have.property('actor_id');",
									"//     });",
									"// });",
									"// pm.test(\"Valid field types\", () => {",
									"//     response.forEach(movie => {",
									"//         pm.expect(movie.id).to.be.a('number').and.be.above(0);;",
									"//         pm.expect(movie.title).to.be.a('string');",
									"//         pm.expect(movie.creation_date).to.be.a('string');",
									"//         pm.expect(movie.actor_id).to.be.a('number').and.be.above(0);;",
									"//     });",
									"// });",
									"// pm.test(\"Each movie has the correct structure\", () => {",
									"//     response.forEach(actor => {",
									"//         pm.expect(actor).to.have.all.keys('id', 'title', 'creation_date', 'actor_id');",
									"//     });",
									"// });",
									"// pm.test(\"Response does not contain unexpected fields\", () => {",
									"//     const validFields = ['id', 'title', 'creation_date', 'actor_id'];",
									"//     response.forEach(movie => {",
									"//         Object.keys(movie).forEach(key => {",
									"//             pm.expect(validFields).to.include(key, `Unexpected field: ${key}`);",
									"//         });",
									"//     });",
									"// });",
									"// pm.test(\"Date of creation format is YYYY-MM-DD for all actors\", () => {",
									"//     const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"//     response.forEach(actor => {",
									"//         pm.expect(actor.creation_date).to.match(dateRegex);",
									"//     });",
									"// });",
									"// pm.test(\"Date of creation is not in the future\", () => {",
									"//     const today = new Date();",
									"//     response.forEach(actor => {",
									"//         const dob = new Date(actor.creation_date);",
									"//         pm.expect(dob).to.be.below(today);",
									"//     });",
									"// });",
									"// pm.test(\"Each movie has a unique ID\", () => {",
									"//     const ids = response.map(actor => actor.id);",
									"//     const uniqueIds = new Set(ids);",
									"//     pm.expect(uniqueIds.size).to.eql(ids.length);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is not empty\", () => {",
									"//     pm.expect(response).to.not.be.empty;",
									"// });",
									"// pm.test(\"Request body is empty\", () => {",
									"//     if (pm.request.body) {",
									"//         pm.expect(pm.request.body.raw).to.be.undefined; ",
									"//     } else {",
									"//         pm.expect(pm.request.body).to.be.undefined; ",
									"//     }",
									"// }); ",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{movieUrl}}",
							"host": [
								"{{movieUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete movies functionality",
			"item": [
				{
					"name": "Create actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() //console.log (response)",
									"const requestBody = pm.request.body.raw",
									"const requestJson = JSON.parse(requestBody)",
									"",
									"//-----------------------------Variables---------------------------------//",
									"pm.collectionVariables.set(\"actorId\", response.id) ",
									"",
									"//-----------------------------Tests-------------------------------------//",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"// pm.test(\"Response matches request body inputs\", () =>{",
									"//     actorId = pm.collectionVariables.get(\"actorId\")",
									"",
									"//     pm.expect(response.id).to.eql(actorId);",
									"//     pm.expect(response.first_name).to.eql(requestJson.firstName);",
									"//     pm.expect(response.last_name).to.eql(requestJson.lastName);",
									"//     pm.expect(response.date_of_birth).to.eql(requestJson.dateOfBirth);",
									"// })",
									"// pm.test(\"Response body contains all expected fields\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response).to.have.property(\"first_name\");",
									"//     pm.expect(response).to.have.property(\"last_name\");",
									"//     pm.expect(response).to.have.property(\"date_of_birth\");",
									"// });",
									"// pm.test(\"Response fields have correct data types\", () => {",
									"//     pm.expect(response.id).to.be.a(\"number\").and.be.above(0);",
									"//     pm.expect(response.first_name).to.be.a(\"string\");",
									"//     pm.expect(response.last_name).to.be.a(\"string\");",
									"//     pm.expect(response.date_of_birth).to.be.a(\"string\");",
									"// });",
									"// pm.test(\"ID is present and is a positive integer\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response.id).to.be.a(\"number\");",
									"//     pm.expect(response.id).to.be.greaterThan(0);",
									"// });",
									"// pm.test(\"Date of birth is in correct format (YYYY-MM-DD)\", () => {",
									"//     const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"//     pm.expect(response.date_of_birth).to.match(dobRegex);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is an object\", () => {",
									"//     pm.expect(response).to.be.an(\"object\");",
									"// });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Denzel\",\n    \"lastName\": \"Washington\",\n    \"dateOfBirth\": \"1954-12-28\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{actorUrl}}",
							"host": [
								"{{actorUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create movie with actor ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() //console.log (response)",
									"const requestBody = pm.request.body.raw",
									"const requestJson = JSON.parse(requestBody)",
									"",
									"//-----------------------------Variables---------------------------------//",
									"pm.collectionVariables.set(\"movieId\", response.id) ",
									"pm.collectionVariables.set(\"movieTitle\", requestJson.title)",
									"pm.collectionVariables.set(\"movieCreationDate\", requestJson.creationDate)",
									"pm.collectionVariables.set(\"movieUrl\", \"http://localhost:3000/movies\");",
									"",
									"//-----------------------------Tests-------------------------------------//",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"// pm.test(\"Response matches request body inputs\", () =>{",
									"//     movieId = pm.collectionVariables.get(\"movieId\")",
									"",
									"//     pm.expect(response.id).to.eql(movieId);",
									"//     pm.expect(response.title).to.eql(requestJson.title);",
									"//     pm.expect(response.creation_date).to.eql(requestJson.creationDate);",
									"//     pm.expect(response.actor_id).to.eql(requestJson.actorId);",
									"// })",
									"// pm.test(\"Response body contains all expected fields\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response).to.have.property(\"title\");",
									"//     pm.expect(response).to.have.property(\"creation_date\");",
									"//     pm.expect(response).to.have.property(\"actor_id\");",
									"// });",
									"// pm.test(\"Response fields have correct data types\", () => {",
									"//     pm.expect(response.id).to.be.a(\"number\").and.be.above(0);",
									"//     pm.expect(response.title).to.be.a(\"string\");",
									"//     pm.expect(response.creation_date).to.be.a(\"string\");",
									"//     pm.expect(response.actor_id).to.be.a(\"number\").and.be.above(0);",
									"// });",
									"// pm.test(\"ID is present and is a positive integer\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response.id).to.be.a(\"number\");",
									"//     pm.expect(response.id).to.be.greaterThan(0);",
									"// });",
									"// pm.test(\"Creation date format is correct (YYYY-MM-DD)\", () => {",
									"//     const jsonData = pm.response.json();",
									"//     const datePattern = /^\\d{4}-\\d{2}-\\d{2}$/; ",
									"//     pm.expect(jsonData.creation_date).to.match(datePattern);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is an object\", () => {",
									"//     pm.expect(response).to.be.an(\"object\");",
									"// });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Training Day\",\n    \"creationDate\": \"2001-10-05\",\n    \"actorId\": {{actorId}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{movieUrl}}",
							"host": [
								"{{movieUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.text() ",
									"",
									"pm.test(\"URL contains the correct movie ID\", () => {",
									"    const movieUrl = pm.variables.get(\"movieUrl\");        ",
									"    const movieId = pm.variables.get(\"movieId\");",
									"",
									"    const requestUrl = pm.request.url.toString();",
									"    pm.expect(requestUrl).to.include(`${movieUrl}/${movieId}`); ",
									"});",
									"pm.test(\"Request body is empty\", () => {",
									"    if (pm.request.body) {",
									"        pm.expect(pm.request.body.raw).to.be.undefined; ",
									"    } else {",
									"        pm.expect(pm.request.body).to.be.undefined; ",
									"    }",
									"}); ",
									"pm.test(\"Response body is empty\", () => {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									"pm.test(\"Status code is 204 Bad Request\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response does not contain unexpected fields\", () => {",
									"    pm.expect(response).to.not.have.any.keys(\"id\", \"tile\", \"creation_date\", \"actor_id\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{movieUrl}}/{{movieId}}",
							"host": [
								"{{movieUrl}}"
							],
							"path": [
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get movie by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"// pm.test(\"Response does not contain unexpected fields\", () => {",
									"//     pm.expect(response).to.not.have.any.keys(\"id\", \"tile\", \"creation_date\", \"actor_id\");",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is an object\", () => {",
									"//     pm.expect(response).to.be.an(\"object\");",
									"// });",
									"// pm.test(\"Request body is empty\", () => {",
									"//     if (pm.request.body) {",
									"//         pm.expect(pm.request.body.raw).to.be.undefined; ",
									"//     } else {",
									"//         pm.expect(pm.request.body).to.be.undefined; ",
									"//     }",
									"// }); ",
									"// pm.test(\"Response contains the correct error message\", () => {",
									"//     pm.expect(response.message).to.eql(\"Movie not found\");",
									"// });",
									"// pm.test(\"Error message structure is correct\", () => {",
									"//     pm.expect(response).to.have.property(\"message\");",
									"//     pm.expect(response.message).to.be.a(\"string\");",
									"// });",
									"// pm.test(\"Error message is not empty\", () => {",
									"//     pm.expect(response.message).to.not.be.empty;",
									"// });",
									"// pm.test(\"Response body is valid JSON\", () => {",
									"//     pm.response.to.be.json;",
									"// });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{movieUrl}}/{{movieId}}",
							"host": [
								"{{movieUrl}}"
							],
							"path": [
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create movie with actor ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() //console.log (response)",
									"const requestBody = pm.request.body.raw",
									"const requestJson = JSON.parse(requestBody)",
									"",
									"//-----------------------------Variables---------------------------------//",
									"pm.collectionVariables.set(\"movieId\", response.id) ",
									"pm.collectionVariables.set(\"movieTitle\", requestJson.title)",
									"pm.collectionVariables.set(\"movieCreationDate\", requestJson.creationDate)",
									"pm.collectionVariables.set(\"movieUrl\", \"http://localhost:3000/movies\");",
									"",
									"//-----------------------------Tests-------------------------------------//",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"// pm.test(\"Response matches request body inputs\", () =>{",
									"//     movieId = pm.collectionVariables.get(\"movieId\")",
									"",
									"//     pm.expect(response.id).to.eql(movieId);",
									"//     pm.expect(response.title).to.eql(requestJson.title);",
									"//     pm.expect(response.creation_date).to.eql(requestJson.creationDate);",
									"//     pm.expect(response.actor_id).to.eql(requestJson.actorId);",
									"// })",
									"// pm.test(\"Response body contains all expected fields\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response).to.have.property(\"title\");",
									"//     pm.expect(response).to.have.property(\"creation_date\");",
									"//     pm.expect(response).to.have.property(\"actor_id\");",
									"// });",
									"// pm.test(\"Response fields have correct data types\", () => {",
									"//     pm.expect(response.id).to.be.a(\"number\").and.be.above(0);",
									"//     pm.expect(response.title).to.be.a(\"string\");",
									"//     pm.expect(response.creation_date).to.be.a(\"string\");",
									"//     pm.expect(response.actor_id).to.be.a(\"number\").and.be.above(0);",
									"// });",
									"// pm.test(\"ID is present and is a positive integer\", () => {",
									"//     pm.expect(response).to.have.property(\"id\");",
									"//     pm.expect(response.id).to.be.a(\"number\");",
									"//     pm.expect(response.id).to.be.greaterThan(0);",
									"// });",
									"// pm.test(\"Creation date format is correct (YYYY-MM-DD)\", () => {",
									"//     const jsonData = pm.response.json();",
									"//     const datePattern = /^\\d{4}-\\d{2}-\\d{2}$/; // Regex for YYYY-MM-DD format",
									"//     pm.expect(jsonData.creation_date).to.match(datePattern);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is an object\", () => {",
									"//     pm.expect(response).to.be.an(\"object\");",
									"// });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Training Day\",\n    \"creationDate\": \"2001-10-05\",\n    \"actorId\": {{actorId}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{movieUrl}}",
							"host": [
								"{{movieUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete non-existent movie (failure)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() ",
									"",
									"pm.test(\"Request URL contains the correct non-existent ID\", () => {",
									"    const movieUrl = pm.variables.get(\"movieUrl\");",
									"    const nonExistentId = pm.variables.get(\"nonExistentId\");",
									"    const requestUrl = pm.request.url.toString();",
									"    pm.expect(requestUrl).to.include(`${movieUrl}/${nonExistentId}`);",
									"});",
									"pm.test(\"Status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains the correct error message\", () => {",
									"    pm.expect(response.message).to.eql(\"Movie not found\");",
									"});",
									"pm.test(\"Error message structure is correct\", () => {",
									"    pm.expect(response).to.have.property(\"message\");",
									"    pm.expect(response.message).to.be.a(\"string\");",
									"});",
									"pm.test(\"Error message is not empty\", () => {",
									"    pm.expect(response.message).to.not.be.empty;",
									"});",
									"pm.test(\"Response time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Response body is valid JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response is an object\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an(\"object\");",
									"});",
									"pm.test(\"Request body is empty\", () => {",
									"    if (pm.request.body) {",
									"        pm.expect(pm.request.body.raw).to.be.undefined; ",
									"    } else {",
									"        pm.expect(pm.request.body).to.be.undefined; ",
									"    }",
									"}); ",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{movieUrl}}/{{nonExistentId}}",
							"host": [
								"{{movieUrl}}"
							],
							"path": [
								"{{nonExistentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"// pm.test(\"Response is an array\", () => {",
									"//     pm.expect(response).to.be.an('array');",
									"// });",
									"// pm.test(\"Saved last movie details are present in the response\", () => {",
									"//     movieId = pm.collectionVariables.get(\"movieId\")",
									"//     title = pm.collectionVariables.get(\"movieTitle\")",
									"//     creationDate = pm.collectionVariables.get(\"movieCreationDate\")",
									"//     actorId = pm.collectionVariables.get(\"actorId\")",
									"",
									"//     const actorFound = response.some(movie => ",
									"//         movie.id === Number(movieId) &&",
									"//         movie.title === title &&",
									"//         movie.creation_date === creationDate &&",
									"//         movie.actor_id === actorId",
									"//     );",
									"//     pm.expect(actorFound).to.be.true;",
									"// });",
									"// pm.test(\"All items in the response array are objects\", () => {",
									"//     response.forEach(item => {",
									"//         pm.expect(item).to.be.an('object');",
									"//     });",
									"// });",
									"// pm.test(\"Each movie object contains required fields\", () => {",
									"//     response.forEach(movie => {",
									"//         pm.expect(movie).to.have.property('id').and.be.above(0);;",
									"//         pm.expect(movie).to.have.property('title');",
									"//         pm.expect(movie).to.have.property('creation_date');",
									"//         pm.expect(movie).to.have.property('actor_id');",
									"//     });",
									"// });",
									"// pm.test(\"Valid field types\", () => {",
									"//     response.forEach(movie => {",
									"//         pm.expect(movie.id).to.be.a('number').and.be.above(0);;",
									"//         pm.expect(movie.title).to.be.a('string');",
									"//         pm.expect(movie.creation_date).to.be.a('string');",
									"//         pm.expect(movie.actor_id).to.be.a('number').and.be.above(0);;",
									"//     });",
									"// });",
									"// pm.test(\"Each movie has the correct structure\", () => {",
									"//     response.forEach(actor => {",
									"//         pm.expect(actor).to.have.all.keys('id', 'title', 'creation_date', 'actor_id');",
									"//     });",
									"// });",
									"// pm.test(\"Response does not contain unexpected fields\", () => {",
									"//     const validFields = ['id', 'title', 'creation_date', 'actor_id'];",
									"//     response.forEach(movie => {",
									"//         Object.keys(movie).forEach(key => {",
									"//             pm.expect(validFields).to.include(key, `Unexpected field: ${key}`);",
									"//         });",
									"//     });",
									"// });",
									"// pm.test(\"Date of creation format is YYYY-MM-DD for all actors\", () => {",
									"//     const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"//     response.forEach(actor => {",
									"//         pm.expect(actor.creation_date).to.match(dateRegex);",
									"//     });",
									"// });",
									"// pm.test(\"Date of creation is not in the future\", () => {",
									"//     const today = new Date();",
									"//     response.forEach(actor => {",
									"//         const dob = new Date(actor.creation_date);",
									"//         pm.expect(dob).to.be.below(today);",
									"//     });",
									"// });",
									"// pm.test(\"Each movie has a unique ID\", () => {",
									"//     const ids = response.map(actor => actor.id);",
									"//     const uniqueIds = new Set(ids);",
									"//     pm.expect(uniqueIds.size).to.eql(ids.length);",
									"// });",
									"// pm.test(\"Response time is less than 2000ms\", () => {",
									"//     pm.expect(pm.response.responseTime).to.be.below(2000);",
									"// });",
									"// pm.test(\"Response is not empty\", () => {",
									"//     pm.expect(response).to.not.be.empty;",
									"// });",
									"// pm.test(\"Request body is empty\", () => {",
									"//     if (pm.request.body) {",
									"//         pm.expect(pm.request.body.raw).to.be.undefined; ",
									"//     } else {",
									"//         pm.expect(pm.request.body).to.be.undefined; ",
									"//     }",
									"// }); ",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{movieUrl}}",
							"host": [
								"{{movieUrl}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "actorUrl",
			"value": "http://localhost:3000/actors",
			"type": "string"
		},
		{
			"key": "movieUrl",
			"value": "http://localhost:3000/movies",
			"type": "string"
		},
		{
			"key": "nonExistentId",
			"value": "99999999\n",
			"type": "string"
		},
		{
			"key": "actorId",
			"value": "1"
		},
		{
			"key": "movieId",
			"value": "1"
		},
		{
			"key": "actorFirstName",
			"value": ""
		},
		{
			"key": "actorLastName",
			"value": ""
		},
		{
			"key": "actorDateOfBirth",
			"value": ""
		},
		{
			"key": "movieTitle",
			"value": ""
		},
		{
			"key": "movieCreationDate",
			"value": ""
		},
		{
			"key": "aa",
			"value": ""
		},
		{
			"key": "movieTile",
			"value": ""
		}
	]
}