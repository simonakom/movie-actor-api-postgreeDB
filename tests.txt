
Test Scenarios in Postman

--------------------------- Test cases for Actors management -----------------------------

→ Create Actor:
 Method: POST
 URL: http://localhost:3000/actors
 Body: 
        {
            "firstName": "Tom",
            "lastName": "Hanks",
            "dateOfBirth": "1956-07-09"
        }
 Expected Response: 201 Created + body

→ Create Actor with future date of birth: 
 Method: POST
 URL: http://localhost:3000/actors
 Body: 
        {
            "firstName": "Agnelina",
            "lastName": "Jolie",
            "dateOfBirth": "2050-01-01"
        }
 Expected Response: 400 Bad Request + message

 → Create Actor without first name:
 Method: POST
 URL: http://localhost:3000/actors
 Body: 
        {
            "lastName": "Deep",
            "dateOfBirth": "1963-06-09"
        }
 Expected Response: 400 Bad Request + message

→ Get all Actors
 Method: GET
 URL: http://localhost:3000/actors
 Expected Response: 200 OK + body

→ Get Actor by ID
 Method: GET
 URL: http://localhost:3000/actors/1 (Replace 1 with a valid actor ID)
 Expected Response: 200 OK + body

→ Get Actor by non-existent ID
 Method: GET
 URL: http://localhost:3000/actors/999
 Expected Response: 404 Not Found + message

→ Update Actor
 Method: PUT
 URL: http://localhost:3000/actors/1 (Replace 1 with a valid actor ID)
 Body: 
        {
             "firstName": "Zendaya",
              "lastName": "Maree Stoermer",
              "dateOfBirth": "1996-09-01"
        }
 Expected Response: 200 OK + body

→ Update Actor with future date of birth
 Method: PUT
 URL: http://localhost:3000/actors/1 (Replace 1 with a valid actor ID)
 Body: 
        {
              "firstName": "Zendaya",
              "lastName": "Maree Stoermer",
              "dateOfBirth": "3900-09-01"
        }
 Expected Response: 400 Bad Request + message

→ Delete Actor
 Method: DELETE 
 URL: http://localhost:3000/actors/1 (Replace 1 with a valid actor ID)
 Expected Response: 204 No Content + body (empty)

→ Delete non-existent Actor
 Method: DELETE
 URL: http://localhost:3000/actors/999
 Expected Response: 404 Not Found + message

--------------------------- Test cases for movies management -----------------------------

→ Create movie with Actor ID
 Method: POST
 URL: http://localhost:3000/movies
 Body: 
        {
              "title": "Forrest Gump",
              "creationDate": "1994-09-23",
              "actorId": 1
        }
 Expected Response: 201 Created + body

→ Create movie without Actor ID
 Method: POST
 URL: http://localhost:3000/movies
 Body: 
       {
              "title": "The Revenant",
              "creationDate": "2016-02-05"
       }
 Expected Response: 400 Bad Request + message

→ Create movie with non-existent Actor ID
 Method: POST
 URL: http://localhost:3000/movies
 Body: 
        {
            "title": "The Matrix",
            "creationDate": "1999-03-31",
            "actorId": 999
        }
 Expected Response: 404 Not Found + message

→ Get all movies
 Method: GET
 URL: http://localhost:3000/movies
 Expected Response: 200 OK + body

→ Get movie by ID
 Method: GET
 URL: http://localhost:3000/movies/1 (Replace 1 with a valid movie ID)
 Expected Response: 200 OK + body

→ Get movie by non-existent ID
 Method: GET
 URL: http://localhost:3000/movies/999
 Expected Response: 404 Not Found + message

→ Update movie by ID
 Method: PUT
 URL: http://localhost:3000/movies/1 (Replace 1 with a valid movie ID)
 Body: 
       {
              "title": "Sully",
              "creationDate": "2016-09-20",
              "actorId": 1
       }
 Expected Response: 200 OK + body

→ Update movie with non-existent Actor ID
 Method: PUT
 URL: http://localhost:3000/movies/1 (Replace 1 with a valid movie ID)
 Body: 
        {
            "title": "Inception: The Sequel",
            "creationDate": "2010-07-16",
            "actorId": 999
        }
 Expected Response: 404 Not Found + message

→ Delete movie
 Method: DELETE
 URL: http://localhost:3000/movies/1 (Replace 1 with a valid movie ID)
 Expected Response: 204 No Content + body (empty)

→ Delete non-existent movie
 Method: DELETE
 URL: http://localhost:3000/movies/999
 Expected Response: 404 Not Found + message


