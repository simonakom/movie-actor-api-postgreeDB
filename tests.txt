
Test Scenarios in Postman

--------------------------- Test cases for Actors management -----------------------------

→ Create Actor:
 Method: POST
 URL: http://localhost:3000/actors
 Body: 
        {
            "firstName": "Tom",
            "lastName": "Hanks",
            "dateOfBirth": "1956-07-09"
        }
 Expected Response: 201 Created + body

→ Create Actor without first name:
 Method: POST
 URL: http://localhost:3000/actors
 Body: 
        {
            "lastName": "Deep",
            "dateOfBirth": "1963-06-09"
        }
 Expected Response: 400 Bad Request + message

→ Create Actor without last name:
 Method: POST
 URL: http://localhost:3000/actors
 Body: 
        {
            "firstName": "Johhny",
            "dateOfBirth": "1963-06-09"
        }
 Expected Response: 400 Bad Request + message

 → Create Actor without birth date:
 Method: POST
 URL: http://localhost:3000/actors
 Body: 
        {
            "firstName": "Johhny",
            "lastName": "Deep"
        }
 Expected Response: 400 Bad Request + message

→ Create Actor with future date of birth: 
 Method: POST
 URL: http://localhost:3000/actors
 Body: 
        {
            "firstName": "Johhny",
            "lastName": "Deep",
            "dateOfBirth": "3050-01-01"
        }
 Expected Response: 400 Bad Request + message

→ Get all Actors:
 Method: GET
 URL: http://localhost:3000/actors
 Expected Response: 200 OK + body

→ Get Actor by ID:
 Method: GET
 URL: http://localhost:3000/actors/1 (Replace 1 with a valid actor ID)
 Expected Response: 200 OK + body

→ Get Actor by non-existent ID:
 Method: GET
 URL: http://localhost:3000/actors/999
 Expected Response: 404 Not Found + message

→ Update Actor:
 Method: PUT
 URL: http://localhost:3000/actors/1 (Replace 1 with a valid actor ID)
 Body: 
        {
             "firstName": "Zendaya",
             "lastName": "Maree Stoermer Coleman",
             "dateOfBirth": "1996-09-01"
        }
 Expected Response: 200 OK + body

→ Update Actor without first name:
 Method: PUT
 URL: http://localhost:3000/actors/1 (Replace 1 with a valid actor ID)
 Body: 
        {
              "lastName": "Coleman",
              "dateOfBirth": "1996-09-01"
        }
 Expected Response: 400 Bad Request + message

→ Update Actor without last name:
 Method: PUT
 URL: http://localhost:3000/actors/1 (Replace 1 with a valid actor ID)
 Body: 
        {
              "firstName": "Zendaya",
              "dateOfBirth": "1996-09-10"
        }
 Expected Response: 400 Bad Request + message

→ Update Actor without date of birth:
 Method: PUT
 URL: http://localhost:3000/actors/1 (Replace 1 with a valid actor ID)
 Body: 
        {
              "firstName": "Zendaya",
              "lastName": "Stoermer"
        }
 Expected Response: 400 Bad Request + message

→ Update Actor with future date of birth:
 Method: PUT
 URL: http://localhost:3000/actors/1 (Replace 1 with a valid actor ID)
 Body: 
        {
              "firstName": "Zendaya",
              "lastName": "Maree Stoermer Coleman",
              "dateOfBirth": "3900-09-01"
        }
 Expected Response: 400 Bad Request + message

→ Update non-existent Actor:
 Method: PUT
 URL: http://localhost:3000/actors/9999
 Body: 
        {
              "firstName": "Zendaya",
              "lastName": "Maree Stoermer Coleman",
              "dateOfBirth": "3900-09-01"
        }
 Expected Response: 404 Not Found + message

→ Delete Actor:
 Method: DELETE 
 URL: http://localhost:3000/actors/1 (Replace 1 with a valid actor ID)
 Expected Response: 204 No Content + body (empty)

 → Delete actor assigned to movie
 Method: DELETE
 URL: http://localhost:3000/actors/1 (Replace 1 with a valid actor ID)
 Expected Response: 400 Bad Request + message

→ Delete non-existent Actor:
 Method: DELETE
 URL: http://localhost:3000/actors/9999
 Expected Response: 404 Not Found + message

--------------------------- Test cases for movies management -----------------------------

→ Create movie with Actor ID:
 Method: POST
 URL: http://localhost:3000/movies
 Body: 
        {
              "title": "Inception",
              "creationDate": "2010-07-16",
              "actorId": 1 (Replace 1 with a valid actor ID)
        }
 Expected Response: 201 Created + body

→ Create movie without a title:
 Method: POST
 URL: http://localhost:3000/movies
 Body: 
       {
             "creationDate": "1997-12-19",
             "actorId": 1 (Replace 1 with a valid actor ID)
       }
 Expected Response: 400 Bad Request + message
 
 → Create movie without a date of creation:
 Method: POST
 URL: http://localhost:3000/movies
 Body: 
       {
             "title": "Titanic"
             "actorId": 1 (Replace 1 with a valid actor ID)
       }
 Expected Response: 400 Bad Request + message

→ Create movie without Actor ID:
 Method: POST
 URL: http://localhost:3000/movies
 Body: 
       {
             "title": "Titanic",
             "creationDate": "1997-12-19"
       }
 Expected Response: 400 Bad Request + message

→ Create movie with non-existent Actor ID:
 Method: POST
 URL: http://localhost:3000/movies
 Body: 
        {
            "title": "Titanic",
            "creationDate": "1997-12-19",
            "actorId": 9999
        }
 Expected Response: 404 Not Found + message

→ Get all movies:
 Method: GET
 URL: http://localhost:3000/movies
 Expected Response: 200 OK + body

→ Get movie by ID:
 Method: GET
 URL: http://localhost:3000/movies/1 (Replace 1 with a valid movie ID)
 Expected Response: 200 OK + body

→ Get movie by non-existent ID:
 Method: GET
 URL: http://localhost:3000/movies/9999
 Expected Response: 404 Not Found + message

→ Update movie by ID:
 Method: PUT
 URL: http://localhost:3000/movies/1 (Replace 1 with a valid movie ID)
 Body: 
       {
              "title": "Lost in Translation",
              "creationDate": "2003-09-12",
              "actorId": 1 (Replace 1 with a valid actor ID)
       }
 Expected Response: 200 OK + body

→ Update movie without a title:
 Method: PUT
 URL: http://localhost:3000/movies/1 (Replace 1 with a valid movie ID)
 Body: 
        {
            "creationDate": "2012-05-04",
            "actorId": 1 (Replace 1 with a valid actor ID)
        }
Expected Response: 400 Bad Request + message

→ Update movie without a date of creation:
 Method: PUT
 URL: http://localhost:3000/movies/1 (Replace 1 with a valid movie ID)
 Body: 
        {
            "title": "The Avengers",
            "actorId": 1 (Replace 1 with a valid actor ID)
        }
Expected Response: 400 Bad Request + message

→ Update movie without Actor ID:
 Method: PUT
 URL: http://localhost:3000/movies/1 (Replace 1 with a valid movie ID)
 Body: 
        {
            "title": "The Avengers",
            "creationDate": "2012-05-04"
        }
Expected Response: 400 Bad Request + message

→ Update movie with non-existent Actor ID:
 Method: PUT
 URL: http://localhost:3000/movies/1 (Replace 1 with a valid movie ID)
 Body: 
        {
            "title": "The Avengers",
            "creationDate": "2012-05-04",
            "actorId": 9999
        }
 Expected Response: 404 Not Found + message

→ Update non-existent movie:
 Method: PUT
 URL: http://localhost:3000/movies/9999
 Body: 
        {
            "title": "The Avengers",
            "creationDate": "2012-05-04",
            "actorId": 1 (Replace 1 with a valid actor ID)
        }
 Expected Response: 404 Not Found + message

→ Delete movie:
 Method: DELETE
 URL: http://localhost:3000/movies/1 (Replace 1 with a valid movie ID)
 Expected Response: 204 No Content + body (empty)

→ Delete non-existent movie:
 Method: DELETE
 URL: http://localhost:3000/movies/9999
 Expected Response: 404 Not Found + message




